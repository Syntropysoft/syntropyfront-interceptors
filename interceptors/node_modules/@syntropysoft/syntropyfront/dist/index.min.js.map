{"version":3,"file":"index.min.js","sources":["../src/core/BreadcrumbStore.js","../src/utils/RobustSerializer.js","../src/core/Agent.js","../src/core/ContextCollector.js","../src/interceptors/Interceptors.js","../src/config/presets.js","../src/index.js","../src/core/ProxyObjectTracker.js","../src/core/InterceptorRegistry.js","../src/core/WorkerManager.js"],"sourcesContent":["/**\n * BreadcrumbStore - Almacén de huellas del usuario\n * Mantiene un historial de las últimas acciones del usuario\n */\nexport class BreadcrumbStore {\n    constructor(maxBreadcrumbs = 25) {\n        this.maxBreadcrumbs = maxBreadcrumbs;\n        this.breadcrumbs = [];\n        this.agent = null;\n    }\n\n    /**\n     * Configura el agent para envío automático\n     * @param {Object} agent - Instancia del agent\n     */\n    setAgent(agent) {\n        this.agent = agent;\n    }\n\n    /**\n     * Configura el tamaño máximo de breadcrumbs\n     * @param {number} maxBreadcrumbs - Nuevo tamaño máximo\n     */\n    setMaxBreadcrumbs(maxBreadcrumbs) {\n        this.maxBreadcrumbs = maxBreadcrumbs;\n        \n        // Si el nuevo tamaño es menor, eliminar breadcrumbs excedentes\n        if (this.breadcrumbs.length > this.maxBreadcrumbs) {\n            this.breadcrumbs = this.breadcrumbs.slice(-this.maxBreadcrumbs);\n        }\n    }\n\n    /**\n     * Obtiene el tamaño máximo actual\n     * @returns {number} Tamaño máximo de breadcrumbs\n     */\n    getMaxBreadcrumbs() {\n        return this.maxBreadcrumbs;\n    }\n\n    /**\n     * Añade un breadcrumb a la lista\n     * @param {Object} crumb - El breadcrumb a añadir\n     * @param {string} crumb.category - Categoría del evento (ui, network, error, etc.)\n     * @param {string} crumb.message - Mensaje descriptivo\n     * @param {Object} [crumb.data] - Datos adicionales opcionales\n     */\n    add(crumb) {\n        const breadcrumb = {\n            ...crumb,\n            timestamp: new Date().toISOString(),\n        };\n\n        if (this.breadcrumbs.length >= this.maxBreadcrumbs) {\n            this.breadcrumbs.shift(); // Elimina el más antiguo\n        }\n        \n        this.breadcrumbs.push(breadcrumb);\n        \n        // Callback opcional para logging\n        if (this.onBreadcrumbAdded) {\n            this.onBreadcrumbAdded(breadcrumb);\n        }\n        \n        // Enviar al agent si está configurado\n        if (this.agent) {\n            this.agent.sendBreadcrumbs([breadcrumb]);\n        }\n    }\n\n    /**\n     * Devuelve todos los breadcrumbs\n     * @returns {Array} Copia de todos los breadcrumbs\n     */\n    getAll() {\n        return [...this.breadcrumbs];\n    }\n\n    /**\n     * Limpia todos los breadcrumbs\n     */\n    clear() {\n        this.breadcrumbs = [];\n    }\n\n    /**\n     * Obtiene breadcrumbs por categoría\n     * @param {string} category - Categoría a filtrar\n     * @returns {Array} Breadcrumbs de la categoría especificada\n     */\n    getByCategory(category) {\n        return this.breadcrumbs.filter(b => b.category === category);\n    }\n}\n\n// Instancia singleton\nexport const breadcrumbStore = new BreadcrumbStore(); ","/**\n * RobustSerializer - Serializador robusto que maneja referencias circulares\n * Implementa una solución similar a flatted pero sin dependencias externas\n */\nexport class RobustSerializer {\n    constructor() {\n        this.seen = new WeakSet();\n        this.circularRefs = new Map();\n        this.refCounter = 0;\n    }\n\n    /**\n     * Serializa un objeto de forma segura, manejando referencias circulares\n     * @param {any} obj - Objeto a serializar\n     * @returns {string} JSON string seguro\n     */\n    serialize(obj) {\n        try {\n            // Reset state\n            this.seen = new WeakSet();\n            this.circularRefs = new Map();\n            this.refCounter = 0;\n\n            // Serializar con manejo de referencias circulares\n            const safeObj = this.makeSerializable(obj);\n            \n            // Convertir a JSON\n            return JSON.stringify(safeObj);\n        } catch (error) {\n            console.error('SyntropyFront: Error en serialización robusta:', error);\n            \n            // Fallback: intentar serialización básica con información de error\n            return JSON.stringify({\n                __serializationError: true,\n                error: error.message,\n                originalType: typeof obj,\n                isObject: obj !== null && typeof obj === 'object',\n                timestamp: new Date().toISOString()\n            });\n        }\n    }\n\n    /**\n     * Hace un objeto serializable, manejando referencias circulares\n     * @param {any} obj - Objeto a procesar\n     * @param {string} path - Ruta actual en el objeto\n     * @returns {any} Objeto serializable\n     */\n    makeSerializable(obj, path = '') {\n        // Casos primitivos\n        if (obj === null || obj === undefined) {\n            return obj;\n        }\n\n        if (typeof obj === 'string' || typeof obj === 'number' || typeof obj === 'boolean') {\n            return obj;\n        }\n\n        // Casos especiales\n        if (obj instanceof Date) {\n            return {\n                __type: 'Date',\n                value: obj.toISOString()\n            };\n        }\n\n        if (obj instanceof Error) {\n            return {\n                __type: 'Error',\n                name: obj.name,\n                message: obj.message,\n                stack: obj.stack,\n                cause: obj.cause ? this.makeSerializable(obj.cause, `${path}.cause`) : undefined\n            };\n        }\n\n        if (obj instanceof RegExp) {\n            return {\n                __type: 'RegExp',\n                source: obj.source,\n                flags: obj.flags\n            };\n        }\n\n        // Arrays\n        if (Array.isArray(obj)) {\n            // Verificar referencia circular\n            if (this.seen.has(obj)) {\n                const refId = this.circularRefs.get(obj);\n                return {\n                    __circular: true,\n                    refId: refId\n                };\n            }\n\n            this.seen.add(obj);\n            const refId = `ref_${++this.refCounter}`;\n            this.circularRefs.set(obj, refId);\n\n            return obj.map((item, index) => \n                this.makeSerializable(item, `${path}[${index}]`)\n            );\n        }\n\n        // Objetos\n        if (typeof obj === 'object') {\n            // Verificar referencia circular\n            if (this.seen.has(obj)) {\n                const refId = this.circularRefs.get(obj);\n                return {\n                    __circular: true,\n                    refId: refId\n                };\n            }\n\n            this.seen.add(obj);\n            const refId = `ref_${++this.refCounter}`;\n            this.circularRefs.set(obj, refId);\n\n            const result = {};\n\n            // Procesar propiedades del objeto\n            for (const key in obj) {\n                if (obj.hasOwnProperty(key)) {\n                    try {\n                        const value = obj[key];\n                        const safeValue = this.makeSerializable(value, `${path}.${key}`);\n                        result[key] = safeValue;\n                    } catch (error) {\n                        // Si falla la serialización de una propiedad, la omitimos\n                        result[key] = {\n                            __serializationError: true,\n                            error: error.message,\n                            propertyName: key\n                        };\n                    }\n                }\n            }\n\n            // Procesar símbolos si están disponibles\n            if (Object.getOwnPropertySymbols) {\n                const symbols = Object.getOwnPropertySymbols(obj);\n                for (const symbol of symbols) {\n                    try {\n                        const value = obj[symbol];\n                        const safeValue = this.makeSerializable(value, `${path}[Symbol(${symbol.description})]`);\n                        result[`__symbol_${symbol.description || 'anonymous'}`] = safeValue;\n                    } catch (error) {\n                        result[`__symbol_${symbol.description || 'anonymous'}`] = {\n                            __serializationError: true,\n                            error: error.message,\n                            symbolName: symbol.description || 'anonymous'\n                        };\n                    }\n                }\n            }\n\n            return result;\n        }\n\n        // Funciones y otros tipos\n        if (typeof obj === 'function') {\n            return {\n                __type: 'Function',\n                name: obj.name || 'anonymous',\n                length: obj.length,\n                toString: obj.toString().substring(0, 200) + '...'\n            };\n        }\n\n        // Fallback para otros tipos\n        return {\n            __type: 'Unknown',\n            constructor: obj.constructor ? obj.constructor.name : 'Unknown',\n            toString: String(obj).substring(0, 200) + '...'\n        };\n    }\n\n    /**\n     * Deserializa un objeto serializado con referencias circulares\n     * @param {string} jsonString - JSON string a deserializar\n     * @returns {any} Objeto deserializado\n     */\n    deserialize(jsonString) {\n        try {\n            const parsed = JSON.parse(jsonString);\n            return this.restoreCircularRefs(parsed);\n        } catch (error) {\n            console.error('SyntropyFront: Error en deserialización:', error);\n            return null;\n        }\n    }\n\n    /**\n     * Restaura referencias circulares en un objeto deserializado\n     * @param {any} obj - Objeto a restaurar\n     * @param {Map} refs - Mapa de referencias\n     * @returns {any} Objeto con referencias restauradas\n     */\n    restoreCircularRefs(obj, refs = new Map()) {\n        if (obj === null || obj === undefined) {\n            return obj;\n        }\n\n        if (typeof obj === 'string' || typeof obj === 'number' || typeof obj === 'boolean') {\n            return obj;\n        }\n\n        // Restaurar tipos especiales\n        if (obj.__type === 'Date') {\n            return new Date(obj.value);\n        }\n\n        if (obj.__type === 'Error') {\n            const error = new Error(obj.message);\n            error.name = obj.name;\n            error.stack = obj.stack;\n            if (obj.cause) {\n                error.cause = this.restoreCircularRefs(obj.cause, refs);\n            }\n            return error;\n        }\n\n        if (obj.__type === 'RegExp') {\n            return new RegExp(obj.source, obj.flags);\n        }\n\n        if (obj.__type === 'Function') {\n            // No podemos restaurar funciones completamente, devolvemos info\n            return `[Function: ${obj.name}]`;\n        }\n\n        // Arrays\n        if (Array.isArray(obj)) {\n            const result = [];\n            refs.set(obj, result);\n\n            for (let i = 0; i < obj.length; i++) {\n                if (obj[i] && obj[i].__circular) {\n                    const refId = obj[i].refId;\n                    if (refs.has(refId)) {\n                        result[i] = refs.get(refId);\n                    } else {\n                        result[i] = null; // Referencia no encontrada\n                    }\n                } else {\n                    result[i] = this.restoreCircularRefs(obj[i], refs);\n                }\n            }\n\n            return result;\n        }\n\n        // Objetos\n        if (typeof obj === 'object') {\n            const result = {};\n            refs.set(obj, result);\n\n            for (const key in obj) {\n                if (obj.hasOwnProperty(key)) {\n                    if (key.startsWith('__')) {\n                        // Propiedades especiales\n                        continue;\n                    }\n\n                    const value = obj[key];\n                    if (value && value.__circular) {\n                        const refId = value.refId;\n                        if (refs.has(refId)) {\n                            result[key] = refs.get(refId);\n                        } else {\n                            result[key] = null; // Referencia no encontrada\n                        }\n                    } else {\n                        result[key] = this.restoreCircularRefs(value, refs);\n                    }\n                }\n            }\n\n            return result;\n        }\n\n        return obj;\n    }\n\n    /**\n     * Serializa de forma segura para logging (versión simplificada)\n     * @param {any} obj - Objeto a serializar\n     * @returns {string} JSON string seguro para logs\n     */\n    serializeForLogging(obj) {\n        try {\n            return this.serialize(obj);\n        } catch (error) {\n            return JSON.stringify({\n                __logError: true,\n                message: 'Error serializando para logging',\n                originalError: error.message,\n                timestamp: new Date().toISOString()\n            });\n        }\n    }\n}\n\n// Instancia singleton\nexport const robustSerializer = new RobustSerializer(); ","import { robustSerializer } from '../utils/RobustSerializer.js';\n\n/**\n * Agent - Envía datos de trazabilidad al backend\n * Implementa reintentos con backoff exponencial y buffer persistente\n */\nexport class Agent {\n    constructor() {\n        this.endpoint = null;\n        this.headers = {\n            'Content-Type': 'application/json'\n        };\n        this.batchSize = 10;\n        this.batchTimeout = null; // Por defecto = solo errores\n        this.queue = [];\n        this.batchTimer = null;\n        this.isEnabled = false;\n        this.sendBreadcrumbs = false; // Por defecto = solo errores\n        this.encrypt = null; // Callback de encriptación opcional\n        \n        // Sistema de reintentos\n        this.retryQueue = []; // Cola de reintentos\n        this.retryTimer = null;\n        this.maxRetries = 5;\n        this.baseDelay = 1000; // 1 segundo\n        this.maxDelay = 30000; // 30 segundos\n        \n        // Buffer persistente\n        this.usePersistentBuffer = false;\n        this.dbName = 'SyntropyFrontBuffer';\n        this.dbVersion = 1;\n        this.storeName = 'failedItems';\n        \n        // Inicializar buffer persistente si está disponible\n        this.initPersistentBuffer();\n    }\n\n    /**\n     * Inicializa el buffer persistente (IndexedDB)\n     */\n    async initPersistentBuffer() {\n        try {\n            if (!window.indexedDB) {\n                console.warn('SyntropyFront: IndexedDB no disponible, usando solo memoria');\n                return;\n            }\n\n            const request = indexedDB.open(this.dbName, this.dbVersion);\n            \n            request.onerror = () => {\n                console.warn('SyntropyFront: Error abriendo IndexedDB, usando solo memoria');\n            };\n\n            request.onupgradeneeded = (event) => {\n                const db = event.target.result;\n                if (!db.objectStoreNames.contains(this.storeName)) {\n                    db.createObjectStore(this.storeName, { keyPath: 'id', autoIncrement: true });\n                }\n            };\n\n            request.onsuccess = () => {\n                this.db = request.result;\n                this.usePersistentBuffer = true;\n                console.log('SyntropyFront: Buffer persistente inicializado');\n                \n                // Intentar enviar items fallidos al inicializar\n                this.retryFailedItems();\n            };\n        } catch (error) {\n            console.warn('SyntropyFront: Error inicializando buffer persistente:', error);\n        }\n    }\n\n    /**\n     * Guarda items fallidos en el buffer persistente\n     */\n    async saveToPersistentBuffer(items) {\n        if (!this.usePersistentBuffer || !this.db) return;\n\n        try {\n            const transaction = this.db.transaction([this.storeName], 'readwrite');\n            const store = transaction.objectStore(this.storeName);\n            \n            // ✅ SERIALIZACIÓN ROBUSTA: Serializar items antes de guardar\n            let serializedItems;\n            try {\n                serializedItems = robustSerializer.serialize(items);\n            } catch (error) {\n                console.error('SyntropyFront: Error serializando items para buffer:', error);\n                serializedItems = JSON.stringify({\n                    __serializationError: true,\n                    error: error.message,\n                    timestamp: new Date().toISOString(),\n                    fallbackData: 'Items no serializables'\n                });\n            }\n            \n            const item = {\n                items: serializedItems, // Guardar como string serializado\n                timestamp: new Date().toISOString(),\n                retryCount: 0\n            };\n            \n            await store.add(item);\n            console.log('SyntropyFront: Items guardados en buffer persistente');\n        } catch (error) {\n            console.error('SyntropyFront: Error guardando en buffer persistente:', error);\n        }\n    }\n\n    /**\n     * Obtiene items fallidos del buffer persistente\n     */\n    async getFromPersistentBuffer() {\n        if (!this.usePersistentBuffer || !this.db) return [];\n\n        try {\n            const transaction = this.db.transaction([this.storeName], 'readonly');\n            const store = transaction.objectStore(this.storeName);\n            const request = store.getAll();\n            \n            return new Promise((resolve, reject) => {\n                request.onsuccess = () => resolve(request.result);\n                request.onerror = () => reject(request.error);\n            });\n        } catch (error) {\n            console.error('SyntropyFront: Error obteniendo del buffer persistente:', error);\n            return [];\n        }\n    }\n\n    /**\n     * Remueve items del buffer persistente\n     */\n    async removeFromPersistentBuffer(id) {\n        if (!this.usePersistentBuffer || !this.db) return;\n\n        try {\n            const transaction = this.db.transaction([this.storeName], 'readwrite');\n            const store = transaction.objectStore(this.storeName);\n            await store.delete(id);\n        } catch (error) {\n            console.error('SyntropyFront: Error removiendo del buffer persistente:', error);\n        }\n    }\n\n    /**\n     * Intenta enviar items fallidos del buffer persistente\n     */\n    async retryFailedItems() {\n        if (!this.usePersistentBuffer) return;\n\n        const failedItems = await this.getFromPersistentBuffer();\n        \n        for (const item of failedItems) {\n            if (item.retryCount < this.maxRetries) {\n                // ✅ DESERIALIZACIÓN ROBUSTA: Deserializar items del buffer\n                let deserializedItems;\n                try {\n                    if (typeof item.items === 'string') {\n                        deserializedItems = robustSerializer.deserialize(item.items);\n                    } else {\n                        deserializedItems = item.items; // Ya deserializado\n                    }\n                } catch (error) {\n                    console.error('SyntropyFront: Error deserializando items del buffer:', error);\n                    // Saltar este item y removerlo del buffer\n                    await this.removeFromPersistentBuffer(item.id);\n                    continue;\n                }\n                \n                this.addToRetryQueue(deserializedItems, item.retryCount + 1, item.id);\n            } else {\n                console.warn('SyntropyFront: Item excedió máximo de reintentos, removiendo del buffer');\n                await this.removeFromPersistentBuffer(item.id);\n            }\n        }\n    }\n\n    /**\n     * Configura el agent\n     * @param {Object} config - Configuración del agent\n     * @param {string} config.endpoint - URL del endpoint para enviar datos\n     * @param {Object} [config.headers] - Headers adicionales\n     * @param {number} [config.batchSize] - Tamaño del batch\n     * @param {number} [config.batchTimeout] - Timeout del batch en ms (si existe = modo completo)\n     * @param {Function} [config.encrypt] - Callback para encriptar datos antes de enviar\n     * @param {boolean} [config.usePersistentBuffer] - Usar buffer persistente (default: true)\n     * @param {number} [config.maxRetries] - Máximo número de reintentos (default: 5)\n     */\n    configure(config) {\n        this.endpoint = config.endpoint;\n        this.headers = { ...this.headers, ...config.headers };\n        this.batchSize = config.batchSize || this.batchSize;\n        this.batchTimeout = config.batchTimeout; // Si existe = modo completo\n        this.isEnabled = !!config.endpoint;\n        this.encrypt = config.encrypt || null; // Callback de encriptación\n        this.usePersistentBuffer = config.usePersistentBuffer !== false; // Por defecto: true\n        this.maxRetries = config.maxRetries || this.maxRetries;\n        \n        // Lógica simple: si hay batchTimeout = enviar breadcrumbs, sino = solo errores\n        this.sendBreadcrumbs = !!config.batchTimeout;\n    }\n\n    /**\n     * Envía un error al backend\n     * @param {Object} errorPayload - Payload del error\n     * @param {Object} context - Contexto adicional (opcional)\n     */\n    sendError(errorPayload, context = null) {\n        if (!this.isEnabled) {\n            console.warn('SyntropyFront Agent: No configurado, error no enviado');\n            return;\n        }\n\n        // Agregar contexto si está disponible\n        const payloadWithContext = context ? {\n            ...errorPayload,\n            context: context\n        } : errorPayload;\n\n        // Aplicar encriptación si está configurada\n        const dataToSend = this.encrypt ? this.encrypt(payloadWithContext) : payloadWithContext;\n\n        this.addToQueue({\n            type: 'error',\n            data: dataToSend,\n            timestamp: new Date().toISOString()\n        });\n    }\n\n    /**\n     * Envía breadcrumbs al backend\n     * @param {Array} breadcrumbs - Lista de breadcrumbs\n     */\n    sendBreadcrumbs(breadcrumbs) {\n        // Solo enviar breadcrumbs si está habilitado (batchTimeout configurado)\n        if (!this.isEnabled || !this.sendBreadcrumbs || !breadcrumbs.length) {\n            return;\n        }\n\n        // Aplicar encriptación si está configurada\n        const dataToSend = this.encrypt ? this.encrypt(breadcrumbs) : breadcrumbs;\n\n        this.addToQueue({\n            type: 'breadcrumbs',\n            data: dataToSend,\n            timestamp: new Date().toISOString()\n        });\n    }\n\n    /**\n     * Añade un item a la cola de envío\n     * @param {Object} item - Item a añadir\n     */\n    addToQueue(item) {\n        this.queue.push(item);\n\n        // Enviar inmediatamente si alcanza el tamaño del batch\n        if (this.queue.length >= this.batchSize) {\n            this.flush();\n        } else if (this.batchTimeout && !this.batchTimer) {\n            // Solo programar timeout si batchTimeout está configurado\n            this.batchTimer = setTimeout(() => {\n                this.flush();\n            }, this.batchTimeout);\n        }\n    }\n\n    /**\n     * Añade items a la cola de reintentos\n     * @param {Array} items - Items a reintentar\n     * @param {number} retryCount - Número de reintento\n     * @param {number} persistentId - ID en buffer persistente (opcional)\n     */\n    addToRetryQueue(items, retryCount = 1, persistentId = null) {\n        const delay = Math.min(this.baseDelay * Math.pow(2, retryCount - 1), this.maxDelay);\n        \n        this.retryQueue.push({\n            items,\n            retryCount,\n            persistentId,\n            nextRetry: Date.now() + delay\n        });\n\n        this.scheduleRetry();\n    }\n\n    /**\n     * Programa el próximo reintento\n     */\n    scheduleRetry() {\n        if (this.retryTimer) return;\n\n        const nextItem = this.retryQueue.find(item => item.nextRetry <= Date.now());\n        if (!nextItem) return;\n\n        this.retryTimer = setTimeout(() => {\n            this.processRetryQueue();\n        }, Math.max(0, nextItem.nextRetry - Date.now()));\n    }\n\n    /**\n     * Procesa la cola de reintentos\n     */\n    async processRetryQueue() {\n        this.retryTimer = null;\n\n        const now = Date.now();\n        const itemsToRetry = this.retryQueue.filter(item => item.nextRetry <= now);\n        \n        for (const item of itemsToRetry) {\n            try {\n                await this.sendToBackend(item.items);\n                \n                // ✅ Éxito: remover de cola de reintentos\n                this.retryQueue = this.retryQueue.filter(q => q !== item);\n                \n                // Remover del buffer persistente si existe\n                if (item.persistentId) {\n                    await this.removeFromPersistentBuffer(item.persistentId);\n                }\n                \n                console.log(`SyntropyFront: Reintento exitoso después de ${item.retryCount} intentos`);\n            } catch (error) {\n                console.warn(`SyntropyFront: Reintento ${item.retryCount} falló:`, error);\n                \n                if (item.retryCount >= this.maxRetries) {\n                    // ❌ Máximo de reintentos alcanzado\n                    this.retryQueue = this.retryQueue.filter(q => q !== item);\n                    console.error('SyntropyFront: Item excedió máximo de reintentos, datos perdidos');\n                } else {\n                    // Programar próximo reintento\n                    item.retryCount++;\n                    item.nextRetry = Date.now() + Math.min(\n                        this.baseDelay * Math.pow(2, item.retryCount - 1), \n                        this.maxDelay\n                    );\n                }\n            }\n        }\n\n        // Programar próximo reintento si quedan items\n        if (this.retryQueue.length > 0) {\n            this.scheduleRetry();\n        }\n    }\n\n    /**\n     * Envía todos los items en cola\n     */\n    async flush() {\n        if (this.queue.length === 0) return;\n\n        const itemsToSend = [...this.queue];\n        this.queue = [];\n\n        if (this.batchTimer) {\n            clearTimeout(this.batchTimer);\n            this.batchTimer = null;\n        }\n\n        try {\n            await this.sendToBackend(itemsToSend);\n            console.log('SyntropyFront: Datos enviados exitosamente');\n        } catch (error) {\n            console.error('SyntropyFront Agent: Error enviando datos:', error);\n            \n            // ✅ REINTENTOS: Agregar a cola de reintentos\n            this.addToRetryQueue(itemsToSend);\n            \n            // ✅ BUFFER PERSISTENTE: Guardar en IndexedDB\n            if (this.usePersistentBuffer) {\n                await this.saveToPersistentBuffer(itemsToSend);\n            }\n        }\n    }\n\n    /**\n     * Envía datos al backend\n     * @param {Array} items - Items a enviar\n     */\n    async sendToBackend(items) {\n        const payload = {\n            timestamp: new Date().toISOString(),\n            items: items\n        };\n\n        // ✅ SERIALIZACIÓN ROBUSTA: Usar serializador que maneja referencias circulares\n        let serializedPayload;\n        try {\n            serializedPayload = robustSerializer.serialize(payload);\n        } catch (error) {\n            console.error('SyntropyFront: Error en serialización del payload:', error);\n            \n            // Fallback: intentar serialización básica con información de error\n            serializedPayload = JSON.stringify({\n                __serializationError: true,\n                error: error.message,\n                timestamp: new Date().toISOString(),\n                itemsCount: items.length,\n                fallbackData: 'Serialización falló, datos no enviados'\n            });\n        }\n\n        const response = await fetch(this.endpoint, {\n            method: 'POST',\n            headers: this.headers,\n            body: serializedPayload\n        });\n\n        if (!response.ok) {\n            throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n        }\n\n        return response.json();\n    }\n\n    /**\n     * Fuerza el envío inmediato de todos los datos pendientes\n     */\n    async forceFlush() {\n        await this.flush();\n        \n        // También intentar enviar items en cola de reintentos\n        if (this.retryQueue.length > 0) {\n            console.log('SyntropyFront: Intentando enviar items en cola de reintentos...');\n            await this.processRetryQueue();\n        }\n    }\n\n    /**\n     * Obtiene estadísticas del agent\n     * @returns {Object} Estadísticas\n     */\n    getStats() {\n        return {\n            queueLength: this.queue.length,\n            retryQueueLength: this.retryQueue.length,\n            isEnabled: this.isEnabled,\n            usePersistentBuffer: this.usePersistentBuffer,\n            maxRetries: this.maxRetries\n        };\n    }\n\n    /**\n     * Desactiva el agent\n     */\n    disable() {\n        this.isEnabled = false;\n        this.queue = [];\n        this.retryQueue = [];\n        \n        if (this.batchTimer) {\n            clearTimeout(this.batchTimer);\n            this.batchTimer = null;\n        }\n        \n        if (this.retryTimer) {\n            clearTimeout(this.retryTimer);\n            this.retryTimer = null;\n        }\n    }\n}\n\n// Instancia singleton\nexport const agent = new Agent(); ","/**\n * ContextCollector - Recolector dinámico de contexto\n * Sistema elegante para recolectar datos según lo que pida el usuario\n * Por defecto: Sets curados y seguros\n * Configuración específica: El usuario elige exactamente qué quiere\n */\nexport class ContextCollector {\n    constructor() {\n        // Sets curados por defecto (seguros y útiles)\n        this.defaultContexts = {\n            device: {\n                userAgent: () => navigator.userAgent,\n                language: () => navigator.language,\n                screen: () => ({\n                    width: window.screen.width,\n                    height: window.screen.height\n                }),\n                timezone: () => Intl.DateTimeFormat().resolvedOptions().timeZone\n            },\n            window: {\n                url: () => window.location.href,\n                viewport: () => ({\n                    width: window.innerWidth,\n                    height: window.innerHeight\n                }),\n                title: () => document.title\n            },\n            session: {\n                sessionId: () => this.generateSessionId(),\n                pageLoadTime: () => performance.now()\n            },\n            ui: {\n                visibility: () => document.visibilityState,\n                activeElement: () => document.activeElement ? {\n                    tagName: document.activeElement.tagName\n                } : null\n            },\n            network: {\n                online: () => navigator.onLine,\n                connection: () => navigator.connection ? {\n                    effectiveType: navigator.connection.effectiveType\n                } : null\n            }\n        };\n\n        // Mapeo completo de todos los campos disponibles\n        this.allFields = {\n            device: {\n                userAgent: () => navigator.userAgent,\n                language: () => navigator.language,\n                languages: () => navigator.languages,\n                screen: () => ({\n                    width: window.screen.width,\n                    height: window.screen.height,\n                    availWidth: window.screen.availWidth,\n                    availHeight: window.screen.availHeight,\n                    colorDepth: window.screen.colorDepth,\n                    pixelDepth: window.screen.pixelDepth\n                }),\n                timezone: () => Intl.DateTimeFormat().resolvedOptions().timeZone,\n                cookieEnabled: () => navigator.cookieEnabled,\n                doNotTrack: () => navigator.doNotTrack\n            },\n            window: {\n                url: () => window.location.href,\n                pathname: () => window.location.pathname,\n                search: () => window.location.search,\n                hash: () => window.location.hash,\n                referrer: () => document.referrer,\n                title: () => document.title,\n                viewport: () => ({\n                    width: window.innerWidth,\n                    height: window.innerHeight\n                })\n            },\n            storage: {\n                localStorage: () => {\n                    const keys = Object.keys(localStorage);\n                    return {\n                        keys: keys.length,\n                        size: JSON.stringify(localStorage).length,\n                        keyNames: keys // Solo nombres, no valores\n                    };\n                },\n                sessionStorage: () => {\n                    const keys = Object.keys(sessionStorage);\n                    return {\n                        keys: keys.length,\n                        size: JSON.stringify(sessionStorage).length,\n                        keyNames: keys // Solo nombres, no valores\n                    };\n                }\n            },\n            network: {\n                online: () => navigator.onLine,\n                connection: () => navigator.connection ? {\n                    effectiveType: navigator.connection.effectiveType,\n                    downlink: navigator.connection.downlink,\n                    rtt: navigator.connection.rtt\n                } : null\n            },\n            ui: {\n                focused: () => document.hasFocus(),\n                visibility: () => document.visibilityState,\n                activeElement: () => document.activeElement ? {\n                    tagName: document.activeElement.tagName,\n                    id: document.activeElement.id,\n                    className: document.activeElement.className\n                } : null\n            },\n            performance: {\n                memory: () => window.performance && window.performance.memory ? {\n                    used: Math.round(window.performance.memory.usedJSHeapSize / 1048576),\n                    total: Math.round(window.performance.memory.totalJSHeapSize / 1048576),\n                    limit: Math.round(window.performance.memory.jsHeapSizeLimit / 1048576)\n                } : null,\n                timing: () => window.performance ? {\n                    navigationStart: window.performance.timing.navigationStart,\n                    loadEventEnd: window.performance.timing.loadEventEnd\n                } : null\n            },\n            session: {\n                sessionId: () => this.generateSessionId(),\n                startTime: () => new Date().toISOString(),\n                pageLoadTime: () => performance.now()\n            }\n        };\n    }\n\n    /**\n     * Recolecta contexto según la configuración\n     * @param {Object} contextConfig - Configuración de contexto\n     * @returns {Object} Contexto recolectado\n     */\n    collect(contextConfig = {}) {\n        const context = {};\n\n        Object.entries(contextConfig).forEach(([contextType, config]) => {\n            try {\n                if (config === true) {\n                    // Usar set curado por defecto\n                    context[contextType] = this.collectDefaultContext(contextType);\n                } else if (Array.isArray(config)) {\n                    // Configuración específica: array de campos\n                    context[contextType] = this.collectSpecificFields(contextType, config);\n                } else if (config === false) {\n                    // Explícitamente deshabilitado\n                    // No hacer nada\n                } else {\n                    console.warn(`SyntropyFront: Configuración de contexto inválida para ${contextType}:`, config);\n                }\n            } catch (error) {\n                console.warn(`SyntropyFront: Error recolectando contexto ${contextType}:`, error);\n                context[contextType] = { error: 'Failed to collect' };\n            }\n        });\n\n        return context;\n    }\n\n    /**\n     * Recolecta el set curado por defecto\n     * @param {string} contextType - Tipo de contexto\n     * @returns {Object} Contexto por defecto\n     */\n    collectDefaultContext(contextType) {\n        const defaultContext = this.defaultContexts[contextType];\n        if (!defaultContext) {\n            console.warn(`SyntropyFront: No hay set por defecto para ${contextType}`);\n            return {};\n        }\n\n        const result = {};\n        Object.entries(defaultContext).forEach(([field, getter]) => {\n            try {\n                result[field] = getter();\n            } catch (error) {\n                console.warn(`SyntropyFront: Error recolectando campo ${field} de ${contextType}:`, error);\n                result[field] = null;\n            }\n        });\n\n        return result;\n    }\n\n    /**\n     * Recolecta campos específicos\n     * @param {string} contextType - Tipo de contexto\n     * @param {Array} fields - Campos específicos a recolectar\n     * @returns {Object} Contexto específico\n     */\n    collectSpecificFields(contextType, fields) {\n        const allFields = this.allFields[contextType];\n        if (!allFields) {\n            console.warn(`SyntropyFront: Tipo de contexto desconocido: ${contextType}`);\n            return {};\n        }\n\n        const result = {};\n        fields.forEach(field => {\n            try {\n                if (allFields[field]) {\n                    result[field] = allFields[field]();\n                } else {\n                    console.warn(`SyntropyFront: Campo ${field} no disponible en ${contextType}`);\n                }\n            } catch (error) {\n                console.warn(`SyntropyFront: Error recolectando campo ${field} de ${contextType}:`, error);\n                result[field] = null;\n            }\n        });\n\n        return result;\n    }\n\n    /**\n     * Genera un ID de sesión simple\n     */\n    generateSessionId() {\n        if (!this._sessionId) {\n            this._sessionId = 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n        }\n        return this._sessionId;\n    }\n\n    /**\n     * Obtiene la lista de tipos de contexto disponibles\n     * @returns {Array} Tipos disponibles\n     */\n    getAvailableTypes() {\n        return Object.keys(this.allFields);\n    }\n\n    /**\n     * Obtiene la lista de campos disponibles para un tipo de contexto\n     * @param {string} contextType - Tipo de contexto\n     * @returns {Array} Campos disponibles\n     */\n    getAvailableFields(contextType) {\n        const fields = this.allFields[contextType];\n        return fields ? Object.keys(fields) : [];\n    }\n\n    /**\n     * Obtiene información sobre los sets por defecto\n     * @returns {Object} Información de sets por defecto\n     */\n    getDefaultContextsInfo() {\n        const info = {};\n        Object.entries(this.defaultContexts).forEach(([type, fields]) => {\n            info[type] = Object.keys(fields);\n        });\n        return info;\n    }\n}\n\n// Instancia singleton\nexport const contextCollector = new ContextCollector(); ","import { breadcrumbStore } from '../core/BreadcrumbStore.js';\nimport { agent } from '../core/Agent.js';\nimport { contextCollector } from '../core/ContextCollector.js';\n\n/**\n * Interceptors - Observadores que capturan eventos automáticamente\n * Implementa Chaining Pattern para coexistir con otros APMs\n */\nexport class Interceptors {\n    constructor() {\n        this.isInitialized = false;\n        this.config = {\n            captureClicks: true,\n            captureFetch: true,\n            captureErrors: true,\n            captureUnhandledRejections: true\n        };\n        this.contextTypes = [];\n        \n        // Referencias originales para restaurar en destroy()\n        this.originalHandlers = {\n            fetch: null,\n            onerror: null,\n            onunhandledrejection: null\n        };\n        \n        // Event listeners para limpiar\n        this.eventListeners = new Map();\n    }\n\n    /**\n     * Configura los interceptores\n     * @param {Object} config - Configuración de interceptores\n     */\n    configure(config) {\n        this.config = { ...this.config, ...config };\n        this.contextTypes = config.context || [];\n    }\n\n    /**\n     * Inicializa todos los interceptores\n     */\n    init() {\n        if (this.isInitialized) {\n            console.warn('SyntropyFront: Interceptors ya están inicializados');\n            return;\n        }\n\n        if (this.config.captureClicks) {\n            this.setupClickInterceptor();\n        }\n\n        if (this.config.captureFetch) {\n            this.setupFetchInterceptor();\n        }\n\n        if (this.config.captureErrors || this.config.captureUnhandledRejections) {\n            this.setupErrorInterceptors();\n        }\n\n        this.isInitialized = true;\n        console.log('SyntropyFront: Interceptors inicializados con Chaining Pattern');\n    }\n\n    /**\n     * Intercepta clics de usuario\n     */\n    setupClickInterceptor() {\n        const clickHandler = (event) => {\n            const el = event.target;\n            if (!el) return;\n            \n            // Genera un selector CSS simple para identificar el elemento\n            let selector = el.tagName.toLowerCase();\n            if (el.id) {\n                selector += `#${el.id}`;\n            } else if (el.className && typeof el.className === 'string') {\n                selector += `.${el.className.split(' ').filter(Boolean).join('.')}`;\n            }\n\n            breadcrumbStore.add({\n                category: 'ui',\n                message: `Usuario hizo click en '${selector}'`,\n                data: {\n                    selector,\n                    tagName: el.tagName,\n                    id: el.id,\n                    className: el.className\n                }\n            });\n        };\n\n        // Guardar referencia para limpiar después\n        this.eventListeners.set('click', clickHandler);\n        document.addEventListener('click', clickHandler, true);\n    }\n\n    /**\n     * Intercepta llamadas de red (fetch) con Chaining\n     */\n    setupFetchInterceptor() {\n        // Guardar referencia original\n        this.originalHandlers.fetch = window.fetch;\n        \n        // Crear nuevo handler que encadena con el original\n        const syntropyFetchHandler = (...args) => {\n            const url = args[0] instanceof Request ? args[0].url : args[0];\n            const method = args[0] instanceof Request ? args[0].method : (args[1]?.method || 'GET');\n            \n            breadcrumbStore.add({\n                category: 'network',\n                message: `Request: ${method} ${url}`,\n                data: {\n                    url,\n                    method,\n                    timestamp: Date.now()\n                }\n            });\n\n            // ✅ CHAINING: Llamar al handler original\n            return this.originalHandlers.fetch.apply(window, args);\n        };\n\n        // Sobrescribir con el nuevo handler\n        window.fetch = syntropyFetchHandler;\n    }\n\n    /**\n     * Intercepta errores globales con Chaining\n     */\n    setupErrorInterceptors() {\n        if (this.config.captureErrors) {\n            // Guardar referencia original\n            this.originalHandlers.onerror = window.onerror;\n            \n            // Crear nuevo handler que encadena con el original\n            const syntropyErrorHandler = (message, source, lineno, colno, error) => {\n                const errorPayload = {\n                    type: 'uncaught_exception',\n                    error: { \n                        message, \n                        source, \n                        lineno, \n                        colno, \n                        stack: error?.stack \n                    },\n                    breadcrumbs: breadcrumbStore.getAll(),\n                    timestamp: new Date().toISOString()\n                };\n\n                this.handleError(errorPayload);\n                \n                // ✅ CHAINING: Llamar al handler original si existe\n                if (this.originalHandlers.onerror) {\n                    try {\n                        return this.originalHandlers.onerror(message, source, lineno, colno, error);\n                    } catch (originalError) {\n                        console.warn('SyntropyFront: Error en handler original:', originalError);\n                        return false;\n                    }\n                }\n                \n                return false; // No prevenir el error por defecto\n            };\n\n            // Sobrescribir con el nuevo handler\n            window.onerror = syntropyErrorHandler;\n        }\n\n        if (this.config.captureUnhandledRejections) {\n            // Guardar referencia original\n            this.originalHandlers.onunhandledrejection = window.onunhandledrejection;\n            \n            // Crear nuevo handler que encadena con el original\n            const syntropyRejectionHandler = (event) => {\n                const errorPayload = {\n                    type: 'unhandled_rejection',\n                    error: {\n                        message: event.reason?.message || 'Rechazo de promesa sin mensaje',\n                        stack: event.reason?.stack,\n                    },\n                    breadcrumbs: breadcrumbStore.getAll(),\n                    timestamp: new Date().toISOString()\n                };\n\n                this.handleError(errorPayload);\n                \n                // ✅ CHAINING: Llamar al handler original si existe\n                if (this.originalHandlers.onunhandledrejection) {\n                    try {\n                        this.originalHandlers.onunhandledrejection(event);\n                    } catch (originalError) {\n                        console.warn('SyntropyFront: Error en handler original de rejection:', originalError);\n                    }\n                }\n            };\n\n            // Sobrescribir con el nuevo handler\n            window.onunhandledrejection = syntropyRejectionHandler;\n        }\n    }\n\n    /**\n     * Maneja los errores capturados\n     * @param {Object} errorPayload - Payload del error\n     */\n    handleError(errorPayload) {\n        // Recolectar contexto si está configurado\n        const context = this.contextTypes.length > 0 ? contextCollector.collect(this.contextTypes) : null;\n        \n        // Enviar al agent si está configurado\n        agent.sendError(errorPayload, context);\n        \n        // Callback para manejo personalizado de errores\n        if (this.onError) {\n            this.onError(errorPayload);\n        } else {\n            // Comportamiento por defecto: log a consola\n            console.error('SyntropyFront - Error detectado:', errorPayload);\n        }\n    }\n\n    /**\n     * Desactiva todos los interceptores y restaura handlers originales\n     */\n    destroy() {\n        if (!this.isInitialized) return;\n\n        console.log('SyntropyFront: Limpiando interceptores...');\n\n        // ✅ RESTAURAR: Handlers originales\n        if (this.originalHandlers.fetch) {\n            window.fetch = this.originalHandlers.fetch;\n            console.log('SyntropyFront: fetch original restaurado');\n        }\n\n        if (this.originalHandlers.onerror) {\n            window.onerror = this.originalHandlers.onerror;\n            console.log('SyntropyFront: onerror original restaurado');\n        }\n\n        if (this.originalHandlers.onunhandledrejection) {\n            window.onunhandledrejection = this.originalHandlers.onunhandledrejection;\n            console.log('SyntropyFront: onunhandledrejection original restaurado');\n        }\n\n        // ✅ LIMPIAR: Event listeners\n        this.eventListeners.forEach((handler, eventType) => {\n            document.removeEventListener(eventType, handler, true);\n            console.log(`SyntropyFront: Event listener ${eventType} removido`);\n        });\n\n        // Limpiar referencias\n        this.originalHandlers = {\n            fetch: null,\n            onerror: null,\n            onunhandledrejection: null\n        };\n        this.eventListeners.clear();\n        this.isInitialized = false;\n\n        console.log('SyntropyFront: Interceptors destruidos y handlers restaurados');\n    }\n\n    /**\n     * Obtiene información sobre los handlers originales\n     * @returns {Object} Información de handlers\n     */\n    getHandlerInfo() {\n        return {\n            isInitialized: this.isInitialized,\n            hasOriginalFetch: !!this.originalHandlers.fetch,\n            hasOriginalOnError: !!this.originalHandlers.onerror,\n            hasOriginalOnUnhandledRejection: !!this.originalHandlers.onunhandledrejection,\n            eventListenersCount: this.eventListeners.size\n        };\n    }\n}\n\n// Instancia singleton\nexport const interceptors = new Interceptors(); ","/**\n * Presets de configuración para SyntropyFront\n * Recetas pre-configuradas para diferentes casos de uso\n * \n * @author SyntropyFront Team\n * @version 1.0.0\n */\n\n/**\n * Preset 'safe' - Modo solo emergencias\n * Ideal para: Producción, aplicaciones críticas, GDPR estricto\n */\nexport const SAFE_PRESET = {\n    name: 'safe',\n    description: 'Modo solo emergencias - Mínimo impacto, máxima privacidad',\n    \n    // Configuración del agent\n    agent: {\n        batchTimeout: null, // Solo errores\n        batchSize: 5,\n        encrypt: null // Sin encriptación por defecto\n    },\n    \n    // Breadcrumbs limitados\n    maxBreadcrumbs: 10,\n    \n    // Contexto mínimo\n    context: {\n        device: true,     // Solo información básica del dispositivo\n        window: false,    // No URL ni viewport\n        session: true,    // Solo sessionId\n        ui: false,        // No información de UI\n        network: false    // No información de red\n    },\n    \n    // Sin tracking de objetos\n    customObjects: {},\n    proxyTracking: false,\n    \n    // Interceptores básicos\n    captureClicks: false,\n    captureFetch: false,\n    captureErrors: true,\n    captureUnhandledRejections: true,\n    \n    // Worker opcional\n    useWorker: false,\n    \n    // Callbacks\n    onError: null,\n    onBreadcrumbAdded: null\n};\n\n/**\n * Preset 'balanced' - Modo equilibrado\n * Ideal para: Desarrollo, testing, aplicaciones generales\n */\nexport const BALANCED_PRESET = {\n    name: 'balanced',\n    description: 'Modo equilibrado - Balance entre información y performance',\n    \n    // Configuración del agent\n    agent: {\n        batchTimeout: 10000, // Envío cada 10 segundos\n        batchSize: 20,\n        encrypt: null\n    },\n    \n    // Breadcrumbs moderados\n    maxBreadcrumbs: 50,\n    \n    // Contexto curado\n    context: {\n        device: true,     // Información completa del dispositivo\n        window: true,     // URL y viewport\n        session: true,    // Información de sesión\n        ui: true,         // Estado básico de UI\n        network: true     // Estado de conectividad\n    },\n    \n    // Tracking de objetos moderado\n    customObjects: {},\n    proxyTracking: {\n        enabled: true,\n        maxStates: 10,\n        trackNested: true,\n        trackArrays: false\n    },\n    \n    // Interceptores completos\n    captureClicks: true,\n    captureFetch: true,\n    captureErrors: true,\n    captureUnhandledRejections: true,\n    \n    // Worker habilitado\n    useWorker: true,\n    \n    // Callbacks\n    onError: null,\n    onBreadcrumbAdded: null\n};\n\n/**\n * Preset 'debug' - Modo debug completo\n * Ideal para: Desarrollo, debugging, análisis profundo\n */\nexport const DEBUG_PRESET = {\n    name: 'debug',\n    description: 'Modo debug completo - Máxima información para desarrollo',\n    \n    // Configuración del agent\n    agent: {\n        batchTimeout: 5000, // Envío cada 5 segundos\n        batchSize: 50,\n        encrypt: null\n    },\n    \n    // Breadcrumbs completos\n    maxBreadcrumbs: 100,\n    \n    // Contexto completo\n    context: {\n        device: true,     // Todo del dispositivo\n        window: true,     // Todo de la ventana\n        session: true,    // Todo de la sesión\n        ui: true,         // Todo de la UI\n        network: true     // Todo de la red\n    },\n    \n    // Tracking de objetos completo\n    customObjects: {},\n    proxyTracking: {\n        enabled: true,\n        maxStates: 20,\n        trackNested: true,\n        trackArrays: true,\n        trackFunctions: true\n    },\n    \n    // Todos los interceptores\n    captureClicks: true,\n    captureFetch: true,\n    captureErrors: true,\n    captureUnhandledRejections: true,\n    \n    // Worker habilitado\n    useWorker: true,\n    \n    // Callbacks para debugging\n    onError: (error) => {\n        console.error('SyntropyFront Error:', error);\n    },\n    onBreadcrumbAdded: (breadcrumb) => {\n        console.log('SyntropyFront Breadcrumb:', breadcrumb);\n    }\n};\n\n/**\n * Preset 'performance' - Modo optimizado para performance\n * Ideal para: Aplicaciones de alta performance, gaming, real-time\n */\nexport const PERFORMANCE_PRESET = {\n    name: 'performance',\n    description: 'Modo performance - Máxima velocidad, información mínima',\n    \n    // Configuración del agent\n    agent: {\n        batchTimeout: null, // Solo errores críticos\n        batchSize: 3,\n        encrypt: null\n    },\n    \n    // Breadcrumbs mínimos\n    maxBreadcrumbs: 5,\n    \n    // Contexto mínimo\n    context: {\n        device: false,    // Sin información de dispositivo\n        window: false,    // Sin información de ventana\n        session: true,    // Solo sessionId\n        ui: false,        // Sin información de UI\n        network: false    // Sin información de red\n    },\n    \n    // Sin tracking de objetos\n    customObjects: {},\n    proxyTracking: false,\n    \n    // Solo errores críticos\n    captureClicks: false,\n    captureFetch: false,\n    captureErrors: true,\n    captureUnhandledRejections: true,\n    \n    // Sin worker para máxima velocidad\n    useWorker: false,\n    \n    // Sin callbacks\n    onError: null,\n    onBreadcrumbAdded: null\n};\n\n/**\n * Mapa de presets disponibles\n */\nexport const PRESETS = {\n    safe: SAFE_PRESET,\n    balanced: BALANCED_PRESET,\n    debug: DEBUG_PRESET,\n    performance: PERFORMANCE_PRESET\n};\n\n/**\n * Obtiene un preset por nombre\n */\nexport function getPreset(name) {\n    const preset = PRESETS[name];\n    if (!preset) {\n        throw new Error(`Preset '${name}' no encontrado. Presets disponibles: ${Object.keys(PRESETS).join(', ')}`);\n    }\n    return preset;\n}\n\n/**\n * Lista todos los presets disponibles\n */\nexport function getAvailablePresets() {\n    return Object.keys(PRESETS).map(name => ({\n        name,\n        ...PRESETS[name]\n    }));\n}\n\n/**\n * Valida si un preset existe\n */\nexport function isValidPreset(name) {\n    return name in PRESETS;\n}\n\n/**\n * Obtiene información de un preset\n */\nexport function getPresetInfo(name) {\n    const preset = getPreset(name);\n    return {\n        name: preset.name,\n        description: preset.description,\n        features: {\n            breadcrumbs: preset.maxBreadcrumbs,\n            context: Object.keys(preset.context).filter(key => preset.context[key]).length,\n            worker: preset.useWorker,\n            proxyTracking: preset.proxyTracking?.enabled || false,\n            agentMode: preset.agent.batchTimeout ? 'completo' : 'solo emergencias'\n        }\n    };\n} ","import { breadcrumbStore } from './core/BreadcrumbStore.js';\nimport { interceptors } from './interceptors/Interceptors.js';\nimport { agent } from './core/Agent.js';\nimport { contextCollector } from './core/ContextCollector.js';\nimport { getPreset, getAvailablePresets, getPresetInfo } from './config/presets.js';\n\n/**\n * SyntropyFront - Sistema de trazabilidad para frontend\n * API principal para inicializar y configurar el sistema\n */\nexport class SyntropyFront {\n    constructor() {\n        this.isInitialized = false;\n        this.currentPreset = null;\n        \n        // Lazy-loaded modules\n        this.proxyObjectTracker = null;\n        this.interceptorRegistry = null;\n        this.workerManager = null;\n        \n        // Configuración por defecto (balanced preset)\n        this.config = {\n            preset: 'balanced', // Preset por defecto\n            maxBreadcrumbs: 50,\n            captureClicks: true,\n            captureFetch: true,\n            captureErrors: true,\n            captureUnhandledRejections: true,\n            onError: null,\n            onBreadcrumbAdded: null,\n            // Configuración del agent\n            agent: {\n                endpoint: null,\n                headers: {},\n                batchSize: 20,\n                batchTimeout: 10000, // 10 segundos por defecto\n                encrypt: null // Callback de encriptación opcional\n            },\n            // Configuración de contexto (nueva arquitectura granular)\n            context: {\n                device: true,    // Set curado por defecto\n                window: true,    // Set curado por defecto\n                session: true,   // Set curado por defecto\n                ui: true,        // Set curado por defecto\n                network: true    // Set curado por defecto\n            },\n            // Configuración de proxy tracking\n            proxyTracking: {\n                enabled: true,\n                maxStates: 10,\n                trackNested: true,\n                trackArrays: false\n            },\n            // Worker habilitado por defecto\n            useWorker: true\n        };\n    }\n\n    /**\n     * Inicializa el sistema de trazabilidad\n     * @param {Object} options - Opciones de configuración\n     */\n    async init(options = {}) {\n        if (this.isInitialized) {\n            console.warn('SyntropyFront ya está inicializado');\n            return;\n        }\n\n        // Manejar preset si se especifica\n        if (options.preset) {\n            try {\n                const preset = getPreset(options.preset);\n                this.currentPreset = options.preset;\n                \n                // Aplicar configuración del preset\n                this.config = { ...this.config, ...preset };\n                \n                console.log(`🎯 SyntropyFront: Aplicando preset '${options.preset}' - ${preset.description}`);\n            } catch (error) {\n                console.error(`❌ SyntropyFront: Error aplicando preset '${options.preset}':`, error.message);\n                throw error;\n            }\n        }\n\n        // Aplicar configuración personalizada (sobrescribe preset)\n        this.config = { ...this.config, ...options };\n\n        // Configurar agent primero\n        if (this.config.agent.endpoint) {\n            agent.configure(this.config.agent);\n        }\n\n        // Configurar worker manager\n        if (this.config.useWorker !== false) {\n            await this.workerManager.init({\n                maxBreadcrumbs: this.config.maxBreadcrumbs,\n                agent: this.config.agent\n            });\n        }\n\n        // Configurar breadcrumb store\n        breadcrumbStore.setMaxBreadcrumbs(this.config.maxBreadcrumbs);\n        breadcrumbStore.onBreadcrumbAdded = this.config.onBreadcrumbAdded;\n        breadcrumbStore.setAgent(agent);\n\n        // Configurar contexto (nueva arquitectura granular)\n        this.contextConfig = this.config.context || {\n            device: true,\n            window: true,\n            session: true,\n            ui: true,\n            network: true\n        };\n\n\n\n        // Lazy load modules based on configuration\n        await this.loadModules();\n\n        // Configurar proxy object tracker (si está habilitado)\n        if (this.config.proxyTracking?.enabled && this.proxyObjectTracker) {\n            this.proxyObjectTracker.configure(this.config.proxyTracking);\n        }\n\n        // Configurar interceptores\n        interceptors.configure({\n            captureClicks: this.config.captureClicks,\n            captureFetch: this.config.captureFetch,\n            captureErrors: this.config.captureErrors,\n            captureUnhandledRejections: this.config.captureUnhandledRejections\n        });\n\n        interceptors.onError = this.config.onError;\n\n        // Inicializar interceptores\n        interceptors.init();\n\n        // Inicializar interceptores personalizados (si están habilitados)\n        if (this.interceptorRegistry) {\n            this.interceptorRegistry.init({\n                breadcrumbStore,\n                agent,\n                contextCollector\n            });\n        }\n\n        this.isInitialized = true;\n        console.log('SyntropyFront inicializado correctamente');\n    }\n\n    /**\n     * Carga módulos dinámicamente basado en la configuración\n     */\n    async loadModules() {\n        const loadPromises = [];\n\n        // Cargar ProxyObjectTracker si está habilitado\n        if (this.config.proxyTracking?.enabled) {\n            loadPromises.push(\n                import('./core/ProxyObjectTracker.js')\n                    .then(module => {\n                        this.proxyObjectTracker = module.proxyObjectTracker;\n                        console.log('🔄 ProxyObjectTracker cargado dinámicamente');\n                    })\n                    .catch(error => {\n                        console.warn('⚠️ Error cargando ProxyObjectTracker:', error);\n                    })\n            );\n        }\n\n        // Cargar InterceptorRegistry si hay interceptores personalizados\n        if (this.config.useInterceptors !== false) {\n            loadPromises.push(\n                import('./core/InterceptorRegistry.js')\n                    .then(module => {\n                        this.interceptorRegistry = module.interceptorRegistry;\n                        console.log('🔄 InterceptorRegistry cargado dinámicamente');\n                    })\n                    .catch(error => {\n                        console.warn('⚠️ Error cargando InterceptorRegistry:', error);\n                    })\n            );\n        }\n\n        // Cargar WorkerManager si está habilitado\n        if (this.config.useWorker !== false) {\n            loadPromises.push(\n                import('./core/WorkerManager.js')\n                    .then(module => {\n                        this.workerManager = new module.default();\n                        console.log('🔄 WorkerManager cargado dinámicamente');\n                    })\n                    .catch(error => {\n                        console.warn('⚠️ Error cargando WorkerManager:', error);\n                    })\n            );\n        }\n\n        // Esperar a que todos los módulos se carguen\n        await Promise.all(loadPromises);\n    }\n\n    /**\n     * Añade un breadcrumb manualmente\n     * @param {string} category - Categoría del evento\n     * @param {string} message - Mensaje descriptivo\n     * @param {Object} data - Datos adicionales\n     */\n    addBreadcrumb(category, message, data = {}) {\n        breadcrumbStore.add({ category, message, data });\n    }\n\n    /**\n     * Obtiene todos los breadcrumbs\n     * @returns {Array} Lista de breadcrumbs\n     */\n    getBreadcrumbs() {\n        return breadcrumbStore.getAll();\n    }\n\n    /**\n     * Obtiene breadcrumbs por categoría\n     * @param {string} category - Categoría a filtrar\n     * @returns {Array} Breadcrumbs de la categoría\n     */\n    getBreadcrumbsByCategory(category) {\n        return breadcrumbStore.getByCategory(category);\n    }\n\n    /**\n     * Limpia todos los breadcrumbs\n     */\n    clearBreadcrumbs() {\n        breadcrumbStore.clear();\n    }\n\n    /**\n     * Desactiva el sistema de trazabilidad\n     */\n    destroy() {\n        if (!this.isInitialized) return;\n\n        interceptors.destroy();\n        \n        if (this.interceptorRegistry) {\n            this.interceptorRegistry.destroy();\n        }\n        \n        breadcrumbStore.clear();\n        agent.disable();\n        \n        if (this.workerManager) {\n            this.workerManager.destroy();\n        }\n        \n        this.isInitialized = false;\n        console.log('SyntropyFront desactivado');\n    }\n\n    /**\n     * Configura el tamaño máximo de breadcrumbs\n     * @param {number} maxBreadcrumbs - Nuevo tamaño máximo\n     */\n    setMaxBreadcrumbs(maxBreadcrumbs) {\n        breadcrumbStore.setMaxBreadcrumbs(maxBreadcrumbs);\n    }\n\n    /**\n     * Obtiene el tamaño máximo actual de breadcrumbs\n     * @returns {number} Tamaño máximo\n     */\n    getMaxBreadcrumbs() {\n        return breadcrumbStore.getMaxBreadcrumbs();\n    }\n\n    /**\n     * Fuerza el envío de datos pendientes al backend\n     */\n    async flush() {\n        await agent.forceFlush();\n    }\n\n    /**\n     * Obtiene el contexto actual según la configuración\n     * @returns {Object} Contexto recolectado\n     */\n    getContext() {\n        const context = contextCollector.collect(this.contextConfig);\n        \n        // Agregar objetos personalizados\n        const customObjects = customObjectCollector.collectCustomObjects();\n        if (Object.keys(customObjects).length > 0) {\n            context.customObjects = customObjects;\n        }\n        \n        return context;\n    }\n\n    /**\n     * Obtiene todos los tipos de contexto disponibles\n     * @returns {Array} Tipos disponibles\n     */\n    getAvailableContextTypes() {\n        return contextCollector.getAvailableTypes();\n    }\n\n    /**\n     * Obtiene los campos disponibles para un tipo de contexto\n     * @param {string} contextType - Tipo de contexto\n     * @returns {Array} Campos disponibles\n     */\n    getAvailableContextFields(contextType) {\n        return contextCollector.getAvailableFields(contextType);\n    }\n\n    /**\n     * Obtiene información sobre los sets por defecto\n     * @returns {Object} Información de sets por defecto\n     */\n    getDefaultContextsInfo() {\n        return contextCollector.getDefaultContextsInfo();\n    }\n\n    /**\n     * Configura el contexto a recolectar\n     * @param {Object} contextConfig - Configuración de contexto\n     */\n    setContext(contextConfig) {\n        if (typeof contextConfig !== 'object') {\n            console.warn('SyntropyFront: contextConfig debe ser un objeto');\n            return;\n        }\n\n        this.contextConfig = contextConfig;\n        console.log('SyntropyFront: Configuración de contexto actualizada:', contextConfig);\n    }\n\n    /**\n     * Configura los tipos de contexto a recolectar (método legacy)\n     * @param {Array} contextTypes - Tipos de contexto\n     */\n    setContextTypes(contextTypes) {\n        if (!Array.isArray(contextTypes)) {\n            console.warn('SyntropyFront: contextTypes debe ser un array');\n            return;\n        }\n\n        // Convertir array a configuración por defecto\n        const contextConfig = {};\n        contextTypes.forEach(type => {\n            contextConfig[type] = true; // Usar set por defecto\n        });\n\n        this.setContext(contextConfig);\n    }\n\n    // ===== DEPRECATED: CUSTOM OBJECT METHODS =====\n    // Estos métodos están deprecados. Usa ProxyObjectTracker en su lugar.\n    \n    /**\n     * @deprecated Usa addProxyObject() en su lugar\n     */\n    addCustomObject(name, source, maxStates = 10) {\n        console.warn('SyntropyFront: addCustomObject() está deprecado. Usa addProxyObject() en su lugar.');\n        throw new Error('addCustomObject() está deprecado. Usa addProxyObject() en su lugar.');\n    }\n\n    /**\n     * @deprecated Usa removeProxyObject() en su lugar\n     */\n    removeCustomObject(name) {\n        console.warn('SyntropyFront: removeCustomObject() está deprecado. Usa removeProxyObject() en su lugar.');\n        throw new Error('removeCustomObject() está deprecado. Usa removeProxyObject() en su lugar.');\n    }\n\n    /**\n     * @deprecated Usa getProxyObjectState() en su lugar\n     */\n    getCustomObjectValue(name) {\n        console.warn('SyntropyFront: getCustomObjectValue() está deprecado. Usa getProxyObjectState() en su lugar.');\n        throw new Error('getCustomObjectValue() está deprecado. Usa getProxyObjectState() en su lugar.');\n    }\n\n    /**\n     * @deprecated Usa getProxyObjectHistory() en su lugar\n     */\n    getCustomObjectHistory(name) {\n        console.warn('SyntropyFront: getCustomObjectHistory() está deprecado. Usa getProxyObjectHistory() en su lugar.');\n        throw new Error('getCustomObjectHistory() está deprecado. Usa getProxyObjectHistory() en su lugar.');\n    }\n\n    /**\n     * @deprecated Usa getProxyTrackedObjects() en su lugar\n     */\n    getCustomObjectNames() {\n        console.warn('SyntropyFront: getCustomObjectNames() está deprecado. Usa getProxyTrackedObjects() en su lugar.');\n        throw new Error('getCustomObjectNames() está deprecado. Usa getProxyTrackedObjects() en su lugar.');\n    }\n\n    /**\n     * Inyecta un interceptor personalizado\n     * @param {string} name - Nombre del interceptor\n     * @param {Object} interceptor - Objeto interceptor con métodos init/destroy\n     * @returns {SyntropyFront} Instancia para chaining\n     */\n    inject(name, interceptor) {\n        if (!this.interceptorRegistry) {\n            console.warn('SyntropyFront: InterceptorRegistry no está cargado. Asegúrate de que useInterceptors no esté en false.');\n            return this;\n        }\n        this.interceptorRegistry.register(name, interceptor);\n        return this; // Para chaining\n    }\n\n    /**\n     * Remueve un interceptor personalizado\n     * @param {string} name - Nombre del interceptor\n     */\n    removeInterceptor(name) {\n        if (!this.interceptorRegistry) {\n            console.warn('SyntropyFront: InterceptorRegistry no está cargado.');\n            return;\n        }\n        this.interceptorRegistry.unregister(name);\n    }\n\n    /**\n     * Obtiene la lista de interceptores registrados\n     * @returns {Array} Lista de nombres de interceptores\n     */\n    getRegisteredInterceptors() {\n        if (!this.interceptorRegistry) {\n            return [];\n        }\n        return this.interceptorRegistry.getRegisteredInterceptors();\n    }\n\n    /**\n     * Obtiene información de un interceptor específico\n     * @param {string} name - Nombre del interceptor\n     * @returns {Object|null} Información del interceptor\n     */\n    getInterceptorInfo(name) {\n        if (!this.interceptorRegistry) {\n            return null;\n        }\n        return this.interceptorRegistry.getInterceptorInfo(name);\n    }\n\n    /**\n     * Verifica si está inicializado\n     * @returns {boolean} Estado de inicialización\n     */\n    isActive() {\n        return this.isInitialized;\n    }\n\n    // ===== PROXY OBJECT TRACKER METHODS =====\n\n    /**\n     * Agrega un objeto para tracking reactivo con Proxy\n     * @param {string} objectPath - Ruta/nombre del objeto\n     * @param {Object} targetObject - Objeto a trackear\n     * @param {Object} options - Opciones de tracking\n     * @returns {Object} Proxy del objeto original\n     */\n    addProxyObject(objectPath, targetObject, options = {}) {\n        if (!this.proxyObjectTracker) {\n            console.warn('SyntropyFront: ProxyObjectTracker no está cargado. Asegúrate de que proxyTracking.enabled esté en true.');\n            return targetObject;\n        }\n        return this.proxyObjectTracker.addObject(objectPath, targetObject, options);\n    }\n\n    /**\n     * Obtiene el historial de estados de un objeto trackeado\n     * @param {string} objectPath - Ruta del objeto\n     * @returns {Array} Historial de estados\n     */\n    getProxyObjectHistory(objectPath) {\n        if (!this.proxyObjectTracker) {\n            return [];\n        }\n        return this.proxyObjectTracker.getObjectHistory(objectPath);\n    }\n\n    /**\n     * Obtiene el estado actual de un objeto trackeado\n     * @param {string} objectPath - Ruta del objeto\n     * @returns {Object|null} Estado actual\n     */\n    getProxyObjectState(objectPath) {\n        if (!this.proxyObjectTracker) {\n            return null;\n        }\n        return this.proxyObjectTracker.getCurrentState(objectPath);\n    }\n\n    /**\n     * Obtiene todos los objetos trackeados con Proxy\n     * @returns {Array} Lista de objetos trackeados\n     */\n    getProxyTrackedObjects() {\n        if (!this.proxyObjectTracker) {\n            return [];\n        }\n        return this.proxyObjectTracker.getTrackedObjects();\n    }\n\n    /**\n     * Remueve un objeto del tracking con Proxy\n     * @param {string} objectPath - Ruta del objeto\n     * @returns {Object|null} Objeto original (sin proxy)\n     */\n    removeProxyObject(objectPath) {\n        if (!this.proxyObjectTracker) {\n            return null;\n        }\n        return this.proxyObjectTracker.removeObject(objectPath);\n    }\n\n    /**\n     * Limpia todos los objetos trackeados con Proxy\n     */\n    clearProxyObjects() {\n        if (!this.proxyObjectTracker) {\n            return;\n        }\n        this.proxyObjectTracker.clear();\n    }\n\n    /**\n     * Obtiene estadísticas del ProxyObjectTracker\n     * @returns {Object} Estadísticas\n     */\n    getProxyTrackerStats() {\n        if (!this.proxyObjectTracker) {\n            return { enabled: false, trackedObjects: 0 };\n        }\n        return this.proxyObjectTracker.getStats();\n    }\n\n    // Worker Manager Methods\n    async addBreadcrumbToWorker(type, message, data = {}) {\n        if (!this.workerManager) {\n            console.warn('SyntropyFront: WorkerManager no está cargado. Asegúrate de que useWorker no esté en false.');\n            return this.addBreadcrumb(type, message, data);\n        }\n        if (this.workerManager.isWorkerAvailable()) {\n            return await this.workerManager.addBreadcrumb(type, message, data);\n        } else {\n            // Fallback al método normal\n            return this.addBreadcrumb(type, message, data);\n        }\n    }\n\n    async getBreadcrumbsFromWorker() {\n        if (!this.workerManager) {\n            return this.getBreadcrumbs();\n        }\n        if (this.workerManager.isWorkerAvailable()) {\n            return await this.workerManager.getBreadcrumbs();\n        } else {\n            return this.getBreadcrumbs();\n        }\n    }\n\n    async clearBreadcrumbsFromWorker() {\n        if (!this.workerManager) {\n            return this.clearBreadcrumbs();\n        }\n        if (this.workerManager.isWorkerAvailable()) {\n            return await this.workerManager.clearBreadcrumbs();\n        } else {\n            return this.clearBreadcrumbs();\n        }\n    }\n\n    async sendErrorToWorker(error, context = {}) {\n        if (!this.workerManager) {\n            console.warn('SyntropyFront: WorkerManager no está cargado. Asegúrate de que useWorker no esté en false.');\n            return this.sendError(error, context);\n        }\n        if (this.workerManager.isWorkerAvailable()) {\n            return await this.workerManager.sendError(error, context);\n        } else {\n            // Fallback al método normal\n            return this.sendError(error, context);\n        }\n    }\n\n    async pingWorker() {\n        if (!this.workerManager) {\n            return { success: false, message: 'Worker no cargado' };\n        }\n        if (this.workerManager.isWorkerAvailable()) {\n            return await this.workerManager.ping();\n        } else {\n            return { success: false, message: 'Worker no disponible' };\n        }\n    }\n\n    getWorkerStatus() {\n        if (!this.workerManager) {\n            return { isAvailable: false, isInitialized: false, pendingRequests: 0 };\n        }\n        return this.workerManager.getStatus();\n    }\n\n    isWorkerAvailable() {\n        if (!this.workerManager) {\n            return false;\n        }\n        return this.workerManager.isWorkerAvailable();\n    }\n\n    // Preset Methods\n    getCurrentPreset() {\n        return this.currentPreset;\n    }\n\n    getPresetInfo(presetName = null) {\n        const name = presetName || this.currentPreset;\n        if (!name) {\n            return null;\n        }\n        return getPresetInfo(name);\n    }\n\n    getAvailablePresets() {\n        return getAvailablePresets();\n    }\n\n    async changePreset(presetName, options = {}) {\n        if (this.isInitialized) {\n            console.warn('SyntropyFront: No se puede cambiar preset después de la inicialización');\n            return false;\n        }\n\n        try {\n            const preset = getPreset(presetName);\n            this.currentPreset = presetName;\n            \n            // Aplicar preset\n            this.config = { ...this.config, ...preset };\n            \n            // Aplicar opciones adicionales\n            this.config = { ...this.config, ...options };\n            \n            console.log(`🎯 SyntropyFront: Preset cambiado a '${presetName}' - ${preset.description}`);\n            return true;\n        } catch (error) {\n            console.error(`❌ SyntropyFront: Error cambiando preset a '${presetName}':`, error.message);\n            return false;\n        }\n    }\n\n    getConfiguration() {\n        return {\n            currentPreset: this.currentPreset,\n            config: this.config,\n            isInitialized: this.isInitialized\n        };\n    }\n}\n\n// Instancia singleton principal\nconst syntropyFront = new SyntropyFront();\n\n// Exportar la instancia como default\nexport default syntropyFront;\n\n// Exportar componentes individuales para uso avanzado\nexport { breadcrumbStore, interceptors, agent }; ","/**\n * ProxyObjectTracker - Tracking reactivo de objetos usando Proxy\n * Captura cambios en tiempo real sin necesidad de polling\n */\nexport class ProxyObjectTracker {\n    constructor() {\n        this.trackedObjects = new Map(); // Map<objectPath, ProxyInfo>\n        this.maxStates = 10; // Estados máximos por objeto\n        this.isEnabled = true;\n        this.onChangeCallback = null; // Callback cuando cambia un objeto\n    }\n\n    /**\n     * Configura el tracker\n     * @param {Object} config - Configuración\n     * @param {number} [config.maxStates] - Máximo número de estados por objeto\n     * @param {Function} [config.onChange] - Callback cuando cambia un objeto\n     */\n    configure(config = {}) {\n        this.maxStates = config.maxStates || this.maxStates;\n        this.onChangeCallback = config.onChange || null;\n        this.isEnabled = config.enabled !== false;\n    }\n\n    /**\n     * Agrega un objeto para tracking reactivo\n     * @param {string} objectPath - Ruta/nombre del objeto\n     * @param {Object} targetObject - Objeto a trackear\n     * @param {Object} options - Opciones de tracking\n     * @returns {Object} Proxy del objeto original\n     */\n    addObject(objectPath, targetObject, options = {}) {\n        if (!this.isEnabled) {\n            console.warn('SyntropyFront: ProxyObjectTracker deshabilitado');\n            return targetObject;\n        }\n\n        if (!targetObject || typeof targetObject !== 'object') {\n            console.warn(`SyntropyFront: Objeto inválido para tracking: ${objectPath}`);\n            return targetObject;\n        }\n\n        // Verificar si ya está siendo trackeado\n        if (this.trackedObjects.has(objectPath)) {\n            console.warn(`SyntropyFront: Objeto ya está siendo trackeado: ${objectPath}`);\n            return this.trackedObjects.get(objectPath).proxy;\n        }\n\n        try {\n            // Crear estado inicial\n            const initialState = {\n                value: this.deepClone(targetObject),\n                timestamp: new Date().toISOString(),\n                changeType: 'initial'\n            };\n\n            // Crear info del objeto trackeado\n            const proxyInfo = {\n                objectPath,\n                originalObject: targetObject,\n                states: [initialState],\n                proxy: null,\n                options: {\n                    trackNested: options.trackNested !== false,\n                    trackArrays: options.trackArrays !== false,\n                    trackFunctions: options.trackFunctions !== false,\n                    maxDepth: options.maxDepth || 5\n                }\n            };\n\n            // Crear Proxy\n            const proxy = this.createProxy(targetObject, proxyInfo);\n            proxyInfo.proxy = proxy;\n\n            // Guardar en el mapa\n            this.trackedObjects.set(objectPath, proxyInfo);\n\n            console.log(`SyntropyFront: Objeto agregado para tracking reactivo: ${objectPath}`);\n            return proxy;\n\n        } catch (error) {\n            console.error(`SyntropyFront: Error creando proxy para ${objectPath}:`, error);\n            return targetObject;\n        }\n    }\n\n    /**\n     * Crea un Proxy que intercepta cambios\n     * @param {Object} target - Objeto objetivo\n     * @param {Object} proxyInfo - Información del proxy\n     * @param {number} depth - Profundidad actual\n     * @returns {Proxy} Proxy del objeto\n     */\n    createProxy(target, proxyInfo, depth = 0) {\n        const { objectPath, options } = proxyInfo;\n\n        return new Proxy(target, {\n            get: (obj, prop) => {\n                const value = obj[prop];\n\n                // Si es un objeto/array y queremos trackear anidados\n                if (options.trackNested && \n                    depth < options.maxDepth && \n                    value && \n                    typeof value === 'object' && \n                    !(value instanceof Date) && \n                    !(value instanceof RegExp) &&\n                    !(value instanceof Error)) {\n                    \n                    // Crear proxy para objetos anidados\n                    if (Array.isArray(value) && options.trackArrays) {\n                        return this.createArrayProxy(value, proxyInfo, depth + 1);\n                    } else if (!Array.isArray(value)) {\n                        return this.createProxy(value, proxyInfo, depth + 1);\n                    }\n                }\n\n                return value;\n            },\n\n            set: (obj, prop, value) => {\n                const oldValue = obj[prop];\n                \n                // Solo registrar si realmente cambió\n                if (!this.isEqual(oldValue, value)) {\n                    // Guardar estado anterior antes del cambio\n                    this.saveState(proxyInfo, 'property_change', {\n                        property: prop,\n                        oldValue: this.deepClone(oldValue),\n                        newValue: this.deepClone(value),\n                        path: `${objectPath}.${prop}`\n                    });\n\n                    // Aplicar el cambio\n                    obj[prop] = value;\n\n                    // Notificar cambio\n                    this.notifyChange(proxyInfo, prop, oldValue, value);\n                }\n\n                return true;\n            },\n\n            deleteProperty: (obj, prop) => {\n                const oldValue = obj[prop];\n                \n                // Guardar estado antes de eliminar\n                this.saveState(proxyInfo, 'property_deleted', {\n                    property: prop,\n                    oldValue: this.deepClone(oldValue),\n                    path: `${objectPath}.${prop}`\n                });\n\n                // Eliminar la propiedad\n                const result = delete obj[prop];\n\n                // Notificar cambio\n                this.notifyChange(proxyInfo, prop, oldValue, undefined);\n\n                return result;\n            }\n        });\n    }\n\n    /**\n     * Crea un Proxy especial para arrays\n     * @param {Array} target - Array objetivo\n     * @param {Object} proxyInfo - Información del proxy\n     * @param {number} depth - Profundidad actual\n     * @returns {Proxy} Proxy del array\n     */\n    createArrayProxy(target, proxyInfo, depth = 0) {\n        const { objectPath, options } = proxyInfo;\n\n        return new Proxy(target, {\n            get: (obj, prop) => {\n                const value = obj[prop];\n\n                // Si es un método de array que modifica\n                if (typeof value === 'function' && this.isArrayMutator(prop)) {\n                    return (...args) => {\n                        // Guardar estado antes de la mutación\n                        this.saveState(proxyInfo, 'array_mutation', {\n                            method: prop,\n                            arguments: args,\n                            oldArray: this.deepClone(obj),\n                            path: objectPath\n                        });\n\n                        // Ejecutar el método\n                        const result = value.apply(obj, args);\n\n                        // Notificar cambio\n                        this.notifyChange(proxyInfo, prop, null, obj);\n\n                        return result;\n                    };\n                }\n\n                // Si es un elemento del array y es un objeto\n                if (options.trackNested && \n                    depth < options.maxDepth && \n                    value && \n                    typeof value === 'object' && \n                    !Array.isArray(value) &&\n                    !(value instanceof Date) && \n                    !(value instanceof RegExp) &&\n                    !(value instanceof Error)) {\n                    \n                    return this.createProxy(value, proxyInfo, depth + 1);\n                }\n\n                return value;\n            },\n\n            set: (obj, prop, value) => {\n                const oldValue = obj[prop];\n                \n                // Solo registrar si realmente cambió\n                if (!this.isEqual(oldValue, value)) {\n                    // Guardar estado anterior\n                    this.saveState(proxyInfo, 'array_element_change', {\n                        index: prop,\n                        oldValue: this.deepClone(oldValue),\n                        newValue: this.deepClone(value),\n                        path: `${objectPath}[${prop}]`\n                    });\n\n                    // Aplicar el cambio\n                    obj[prop] = value;\n\n                    // Notificar cambio\n                    this.notifyChange(proxyInfo, prop, oldValue, value);\n                }\n\n                return true;\n            }\n        });\n    }\n\n    /**\n     * Verifica si un método de array es mutador\n     * @param {string} method - Nombre del método\n     * @returns {boolean} True si es mutador\n     */\n    isArrayMutator(method) {\n        const mutators = [\n            'push', 'pop', 'shift', 'unshift', 'splice', \n            'reverse', 'sort', 'fill', 'copyWithin'\n        ];\n        return mutators.includes(method);\n    }\n\n    /**\n     * Guarda un estado en el historial\n     * @param {Object} proxyInfo - Información del proxy\n     * @param {string} changeType - Tipo de cambio\n     * @param {Object} changeData - Datos del cambio\n     */\n    saveState(proxyInfo, changeType, changeData = {}) {\n        const state = {\n            value: this.deepClone(proxyInfo.originalObject),\n            timestamp: new Date().toISOString(),\n            changeType,\n            changeData\n        };\n\n        // Agregar al historial\n        proxyInfo.states.push(state);\n\n        // Mantener solo los últimos maxStates\n        if (proxyInfo.states.length > this.maxStates) {\n            proxyInfo.states.shift();\n        }\n    }\n\n    /**\n     * Notifica un cambio\n     * @param {Object} proxyInfo - Información del proxy\n     * @param {string} property - Propiedad que cambió\n     * @param {any} oldValue - Valor anterior\n     * @param {any} newValue - Valor nuevo\n     */\n    notifyChange(proxyInfo, property, oldValue, newValue) {\n        if (this.onChangeCallback) {\n            try {\n                this.onChangeCallback({\n                    objectPath: proxyInfo.objectPath,\n                    property,\n                    oldValue,\n                    newValue,\n                    timestamp: new Date().toISOString(),\n                    states: proxyInfo.states.length\n                });\n            } catch (error) {\n                console.error('SyntropyFront: Error en callback de cambio:', error);\n            }\n        }\n    }\n\n    /**\n     * Obtiene el historial de estados de un objeto\n     * @param {string} objectPath - Ruta del objeto\n     * @returns {Array} Historial de estados\n     */\n    getObjectHistory(objectPath) {\n        const proxyInfo = this.trackedObjects.get(objectPath);\n        if (!proxyInfo) {\n            console.warn(`SyntropyFront: Objeto no encontrado: ${objectPath}`);\n            return [];\n        }\n\n        return [...proxyInfo.states];\n    }\n\n    /**\n     * Obtiene el estado actual de un objeto\n     * @param {string} objectPath - Ruta del objeto\n     * @returns {Object|null} Estado actual\n     */\n    getCurrentState(objectPath) {\n        const proxyInfo = this.trackedObjects.get(objectPath);\n        if (!proxyInfo) {\n            return null;\n        }\n\n        return {\n            value: this.deepClone(proxyInfo.originalObject),\n            timestamp: new Date().toISOString(),\n            statesCount: proxyInfo.states.length\n        };\n    }\n\n    /**\n     * Obtiene todos los objetos trackeados\n     * @returns {Array} Lista de objetos trackeados\n     */\n    getTrackedObjects() {\n        return Array.from(this.trackedObjects.keys());\n    }\n\n    /**\n     * Remueve un objeto del tracking\n     * @param {string} objectPath - Ruta del objeto\n     * @returns {Object|null} Objeto original (sin proxy)\n     */\n    removeObject(objectPath) {\n        const proxyInfo = this.trackedObjects.get(objectPath);\n        if (!proxyInfo) {\n            return null;\n        }\n\n        this.trackedObjects.delete(objectPath);\n        console.log(`SyntropyFront: Objeto removido del tracking: ${objectPath}`);\n        \n        return proxyInfo.originalObject;\n    }\n\n    /**\n     * Limpia todos los objetos trackeados\n     */\n    clear() {\n        this.trackedObjects.clear();\n        console.log('SyntropyFront: Todos los objetos removidos del tracking');\n    }\n\n    /**\n     * Obtiene estadísticas del tracker\n     * @returns {Object} Estadísticas\n     */\n    getStats() {\n        const stats = {\n            trackedObjects: this.trackedObjects.size,\n            totalStates: 0,\n            isEnabled: this.isEnabled,\n            maxStates: this.maxStates\n        };\n\n        for (const proxyInfo of this.trackedObjects.values()) {\n            stats.totalStates += proxyInfo.states.length;\n        }\n\n        return stats;\n    }\n\n    /**\n     * Clona profundamente un objeto\n     * @param {any} obj - Objeto a clonar\n     * @returns {any} Objeto clonado\n     */\n    deepClone(obj) {\n        if (obj === null || obj === undefined) {\n            return obj;\n        }\n\n        if (typeof obj !== 'object') {\n            return obj;\n        }\n\n        if (obj instanceof Date) {\n            return new Date(obj.getTime());\n        }\n\n        if (obj instanceof RegExp) {\n            return new RegExp(obj.source, obj.flags);\n        }\n\n        if (obj instanceof Error) {\n            const error = new Error(obj.message);\n            error.name = obj.name;\n            error.stack = obj.stack;\n            if (obj.cause) {\n                error.cause = this.deepClone(obj.cause);\n            }\n            return error;\n        }\n\n        if (Array.isArray(obj)) {\n            return obj.map(item => this.deepClone(item));\n        }\n\n        const cloned = {};\n        for (const key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                cloned[key] = this.deepClone(obj[key]);\n            }\n        }\n\n        return cloned;\n    }\n\n    /**\n     * Compara dos valores para verificar si son iguales\n     * @param {any} a - Primer valor\n     * @param {any} b - Segundo valor\n     * @returns {boolean} True si son iguales\n     */\n    isEqual(a, b) {\n        if (a === b) return true;\n        if (a === null || b === null) return a === b;\n        if (typeof a !== typeof b) return false;\n        if (typeof a !== 'object') return a === b;\n\n        // Para objetos, comparación superficial\n        const keysA = Object.keys(a);\n        const keysB = Object.keys(b);\n        \n        if (keysA.length !== keysB.length) return false;\n        \n        for (const key of keysA) {\n            if (!keysB.includes(key)) return false;\n            if (a[key] !== b[key]) return false;\n        }\n        \n        return true;\n    }\n}\n\n// Instancia singleton\nexport const proxyObjectTracker = new ProxyObjectTracker(); ","/**\n * InterceptorRegistry - Registro de interceptores personalizados\n * Permite al usuario inyectar sus propios interceptores sin modificar el código base\n * Usa una Facade para exponer solo métodos seguros a los interceptores\n */\nexport class InterceptorRegistry {\n    constructor() {\n        this.customInterceptors = new Map();\n        this.isInitialized = false;\n    }\n\n    /**\n     * Crea una API segura para los interceptores\n     * Solo expone métodos públicos y seguros\n     * @param {Object} config - Configuración con instancias internas\n     * @returns {Object} API segura para interceptores\n     */\n    createInterceptorApi(config) {\n        const { breadcrumbStore, agent, contextCollector } = config;\n        \n        return {\n            // Métodos para breadcrumbs\n            addBreadcrumb: (category, message, data = {}) => {\n                breadcrumbStore.add({ category, message, data, timestamp: new Date().toISOString() });\n            },\n            \n            // Métodos para enviar datos\n            sendError: (errorPayload, context = null) => {\n                agent.sendError(errorPayload, context);\n            },\n            \n            sendBreadcrumbs: (breadcrumbs) => {\n                agent.sendBreadcrumbs(breadcrumbs);\n            },\n            \n            // Métodos para contexto\n            getContext: (contextConfig = {}) => {\n                return contextCollector.collect(contextConfig);\n            },\n            \n            // Métodos de utilidad\n            getTimestamp: () => new Date().toISOString(),\n            \n            // Información de la API (solo lectura)\n            apiVersion: '1.0.0',\n            availableMethods: [\n                'addBreadcrumb',\n                'sendError', \n                'sendBreadcrumbs',\n                'getContext',\n                'getTimestamp'\n            ]\n        };\n    }\n\n    /**\n     * Registra un interceptor personalizado\n     * @param {string} name - Nombre del interceptor\n     * @param {Object} interceptor - Objeto interceptor con métodos init/destroy\n     */\n    register(name, interceptor) {\n        if (!interceptor || typeof interceptor.init !== 'function') {\n            throw new Error(`Interceptor ${name} debe tener un método init()`);\n        }\n\n        this.customInterceptors.set(name, {\n            name,\n            interceptor,\n            enabled: true\n        });\n\n        console.log(`SyntropyFront: Interceptor personalizado registrado: ${name}`);\n    }\n\n    /**\n     * Remueve un interceptor personalizado\n     * @param {string} name - Nombre del interceptor\n     */\n    unregister(name) {\n        const registered = this.customInterceptors.get(name);\n        if (registered) {\n            // Destruir el interceptor si está inicializado\n            if (this.isInitialized && registered.interceptor.destroy) {\n                try {\n                    registered.interceptor.destroy();\n                } catch (error) {\n                    console.warn(`SyntropyFront: Error destruyendo interceptor ${name}:`, error);\n                }\n            }\n            \n            this.customInterceptors.delete(name);\n            console.log(`SyntropyFront: Interceptor personalizado removido: ${name}`);\n        }\n    }\n\n    /**\n     * Inicializa todos los interceptores personalizados\n     * @param {Object} config - Configuración con instancias internas\n     */\n    init(config = {}) {\n        if (this.isInitialized) {\n            console.warn('SyntropyFront: InterceptorRegistry ya está inicializado');\n            return;\n        }\n\n        // Crear API segura para interceptores\n        const interceptorApi = this.createInterceptorApi(config);\n\n        for (const [name, registered] of this.customInterceptors) {\n            if (registered.enabled) {\n                try {\n                    // ✅ SEGURO: Pasar solo la API, no el config crudo\n                    registered.interceptor.init(interceptorApi);\n                    console.log(`SyntropyFront: Interceptor ${name} inicializado`);\n                } catch (error) {\n                    console.error(`SyntropyFront: Error inicializando interceptor ${name}:`, error);\n                }\n            }\n        }\n\n        this.isInitialized = true;\n    }\n\n    /**\n     * Destruye todos los interceptores personalizados\n     */\n    destroy() {\n        if (!this.isInitialized) return;\n\n        for (const [name, registered] of this.customInterceptors) {\n            if (registered.interceptor.destroy) {\n                try {\n                    registered.interceptor.destroy();\n                    console.log(`SyntropyFront: Interceptor ${name} destruido`);\n                } catch (error) {\n                    console.warn(`SyntropyFront: Error destruyendo interceptor ${name}:`, error);\n                }\n            }\n        }\n\n        this.isInitialized = false;\n    }\n\n    /**\n     * Habilita/deshabilita un interceptor personalizado\n     * @param {string} name - Nombre del interceptor\n     * @param {boolean} enabled - Si está habilitado\n     */\n    setEnabled(name, enabled) {\n        const registered = this.customInterceptors.get(name);\n        if (registered) {\n            registered.enabled = enabled;\n            \n            if (this.isInitialized) {\n                if (enabled && registered.interceptor.init) {\n                    try {\n                        // Crear API segura para el interceptor\n                        const interceptorApi = this.createInterceptorApi({\n                            breadcrumbStore: this.breadcrumbStore,\n                            agent: this.agent,\n                            contextCollector: this.contextCollector\n                        });\n                        registered.interceptor.init(interceptorApi);\n                        console.log(`SyntropyFront: Interceptor ${name} habilitado`);\n                    } catch (error) {\n                        console.error(`SyntropyFront: Error habilitando interceptor ${name}:`, error);\n                    }\n                } else if (!enabled && registered.interceptor.destroy) {\n                    try {\n                        registered.interceptor.destroy();\n                        console.log(`SyntropyFront: Interceptor ${name} deshabilitado`);\n                    } catch (error) {\n                        console.warn(`SyntropyFront: Error deshabilitando interceptor ${name}:`, error);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Obtiene la lista de interceptores registrados\n     * @returns {Array} Lista de nombres de interceptores\n     */\n    getRegisteredInterceptors() {\n        return Array.from(this.customInterceptors.keys());\n    }\n\n    /**\n     * Obtiene información de un interceptor específico\n     * @param {string} name - Nombre del interceptor\n     * @returns {Object|null} Información del interceptor\n     */\n    getInterceptorInfo(name) {\n        const registered = this.customInterceptors.get(name);\n        if (registered) {\n            return {\n                name: registered.name,\n                enabled: registered.enabled,\n                hasInit: typeof registered.interceptor.init === 'function',\n                hasDestroy: typeof registered.interceptor.destroy === 'function'\n            };\n        }\n        return null;\n    }\n\n    /**\n     * Obtiene la documentación de la API para interceptores\n     * @returns {Object} Documentación de la API\n     */\n    getApiDocumentation() {\n        return {\n            version: '1.0.0',\n            methods: {\n                addBreadcrumb: {\n                    description: 'Agrega un breadcrumb al historial',\n                    signature: 'addBreadcrumb(category, message, data?)',\n                    example: 'api.addBreadcrumb(\"ui\", \"Usuario hizo click\", { element: \"button\" })'\n                },\n                sendError: {\n                    description: 'Envía un error al backend',\n                    signature: 'sendError(errorPayload, context?)',\n                    example: 'api.sendError({ message: \"Error crítico\" }, { device: true })'\n                },\n                sendBreadcrumbs: {\n                    description: 'Envía breadcrumbs al backend',\n                    signature: 'sendBreadcrumbs(breadcrumbs)',\n                    example: 'api.sendBreadcrumbs([{ category: \"ui\", message: \"Click\" }])'\n                },\n                getContext: {\n                    description: 'Obtiene contexto del navegador',\n                    signature: 'getContext(contextConfig?)',\n                    example: 'api.getContext({ device: true, window: [\"url\"] })'\n                },\n                getTimestamp: {\n                    description: 'Obtiene timestamp actual en formato ISO',\n                    signature: 'getTimestamp()',\n                    example: 'const now = api.getTimestamp()'\n                }\n            }\n        };\n    }\n\n    /**\n     * Limpia todos los interceptores registrados\n     */\n    clear() {\n        this.destroy();\n        this.customInterceptors.clear();\n    }\n}\n\n// Instancia singleton\nexport const interceptorRegistry = new InterceptorRegistry(); ","/**\n * WorkerManager - Maneja comunicación con SyntropyWorker\n * Proporciona API para interactuar con el worker desde el main thread\n * \n * @author SyntropyFront Team\n * @version 1.0.0\n */\n\nclass WorkerManager {\n    constructor() {\n        this.worker = null;\n        this.pendingRequests = new Map();\n        this.requestId = 0;\n        this.isInitialized = false;\n        this.config = {};\n        \n        // Setup worker communication\n        this.setupWorker();\n    }\n\n    /**\n     * Inicializa el worker\n     */\n    setupWorker() {\n        try {\n            // Crear worker\n            this.worker = new Worker('./src/workers/SyntropyWorker.js');\n            \n            // Setup message handling\n            this.worker.addEventListener('message', (event) => {\n                this.handleWorkerMessage(event.data);\n            });\n            \n            // Setup error handling\n            this.worker.addEventListener('error', (error) => {\n                console.error('SyntropyWorker error:', error);\n                this.handleWorkerError(error);\n            });\n            \n            console.log('🔄 WorkerManager: Worker inicializado');\n        } catch (error) {\n            console.error('WorkerManager: Error inicializando worker:', error);\n            this.handleWorkerUnavailable();\n        }\n    }\n\n    /**\n     * Inicializa el worker con configuración\n     */\n    async init(config) {\n        try {\n            this.config = config;\n            \n            const response = await this.sendMessage('INIT', config);\n            \n            if (response.success) {\n                this.isInitialized = true;\n                console.log('✅ WorkerManager: Worker inicializado correctamente');\n                return true;\n            } else {\n                throw new Error(response.error || 'Error inicializando worker');\n            }\n        } catch (error) {\n            console.error('WorkerManager: Error en init:', error);\n            return false;\n        }\n    }\n\n    /**\n     * Envía mensaje al worker y espera respuesta\n     */\n    sendMessage(type, payload = {}) {\n        return new Promise((resolve, reject) => {\n            if (!this.worker) {\n                reject(new Error('Worker no disponible'));\n                return;\n            }\n\n            const id = this.generateRequestId();\n            \n            // Guardar callback para la respuesta\n            this.pendingRequests.set(id, { resolve, reject });\n            \n            // Enviar mensaje al worker\n            this.worker.postMessage({\n                type,\n                payload,\n                id\n            });\n            \n            // Timeout para evitar requests colgados\n            setTimeout(() => {\n                if (this.pendingRequests.has(id)) {\n                    this.pendingRequests.delete(id);\n                    reject(new Error(`Timeout en request: ${type}`));\n                }\n            }, 5000); // 5 segundos timeout\n        });\n    }\n\n    /**\n     * Maneja mensajes del worker\n     */\n    handleWorkerMessage(data) {\n        const { id, success, error, ...response } = data;\n        \n        const request = this.pendingRequests.get(id);\n        if (request) {\n            this.pendingRequests.delete(id);\n            \n            if (success) {\n                request.resolve(response);\n            } else {\n                request.reject(new Error(error || 'Error en worker'));\n            }\n        } else {\n            console.warn('WorkerManager: Respuesta sin request pendiente:', id);\n        }\n    }\n\n    /**\n     * Maneja errores del worker\n     */\n    handleWorkerError(error) {\n        console.error('WorkerManager: Error del worker:', error);\n        \n        // Limpiar requests pendientes\n        this.pendingRequests.forEach((request) => {\n            request.reject(new Error('Worker error'));\n        });\n        this.pendingRequests.clear();\n        \n        // Fallback a modo sin worker\n        this.handleWorkerUnavailable();\n    }\n\n    /**\n     * Maneja cuando el worker no está disponible\n     */\n    handleWorkerUnavailable() {\n        console.warn('WorkerManager: Worker no disponible, usando fallback');\n        \n        // Aquí podríamos implementar fallback al modo main thread\n        // Por ahora solo loggeamos\n    }\n\n    /**\n     * Agrega breadcrumb al worker\n     */\n    async addBreadcrumb(type, message, data = {}) {\n        try {\n            const response = await this.sendMessage('ADD_BREADCRUMB', {\n                type,\n                message,\n                data\n            });\n            \n            return response;\n        } catch (error) {\n            console.error('WorkerManager: Error agregando breadcrumb:', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Obtiene breadcrumbs del worker\n     */\n    async getBreadcrumbs() {\n        try {\n            const response = await this.sendMessage('GET_BREADCRUMBS');\n            return response.breadcrumbs || [];\n        } catch (error) {\n            console.error('WorkerManager: Error obteniendo breadcrumbs:', error);\n            return [];\n        }\n    }\n\n    /**\n     * Limpia breadcrumbs del worker\n     */\n    async clearBreadcrumbs() {\n        try {\n            const response = await this.sendMessage('CLEAR_BREADCRUMBS');\n            return response;\n        } catch (error) {\n            console.error('WorkerManager: Error limpiando breadcrumbs:', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Envía error al worker\n     */\n    async sendError(error, context = {}) {\n        try {\n            const response = await this.sendMessage('SEND_ERROR', {\n                error,\n                context\n            });\n            \n            return response;\n        } catch (error) {\n            console.error('WorkerManager: Error enviando error:', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Actualiza contexto del worker\n     */\n    async updateContext(context) {\n        try {\n            const response = await this.sendMessage('UPDATE_CONTEXT', context);\n            return response;\n        } catch (error) {\n            console.error('WorkerManager: Error actualizando contexto:', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Ping al worker para verificar conectividad\n     */\n    async ping() {\n        try {\n            const response = await this.sendMessage('PING');\n            return response;\n        } catch (error) {\n            console.error('WorkerManager: Error en ping:', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Obtiene estadísticas del worker\n     */\n    async getWorkerStats() {\n        try {\n            const response = await this.sendMessage('GET_STATS');\n            return response;\n        } catch (error) {\n            console.error('WorkerManager: Error obteniendo stats:', error);\n            return null;\n        }\n    }\n\n    /**\n     * Destruye el worker\n     */\n    destroy() {\n        if (this.worker) {\n            // Limpiar requests pendientes\n            this.pendingRequests.forEach((request) => {\n                request.reject(new Error('Worker destroyed'));\n            });\n            this.pendingRequests.clear();\n            \n            // Terminar worker\n            this.worker.terminate();\n            this.worker = null;\n            \n            console.log('🔄 WorkerManager: Worker destruido');\n        }\n    }\n\n    /**\n     * Genera ID único para requests\n     */\n    generateRequestId() {\n        return `req_${++this.requestId}_${Date.now()}`;\n    }\n\n    /**\n     * Verifica si el worker está disponible\n     */\n    isWorkerAvailable() {\n        return this.worker !== null && this.isInitialized;\n    }\n\n    /**\n     * Obtiene estado del worker\n     */\n    getStatus() {\n        return {\n            isAvailable: this.isWorkerAvailable(),\n            isInitialized: this.isInitialized,\n            pendingRequests: this.pendingRequests.size,\n            config: this.config\n        };\n    }\n}\n\nexport default WorkerManager; "],"names":["breadcrumbStore","constructor","maxBreadcrumbs","this","breadcrumbs","agent","setAgent","setMaxBreadcrumbs","length","slice","getMaxBreadcrumbs","add","crumb","breadcrumb","timestamp","Date","toISOString","shift","push","onBreadcrumbAdded","sendBreadcrumbs","getAll","clear","getByCategory","category","filter","b","robustSerializer","seen","WeakSet","circularRefs","Map","refCounter","serialize","obj","safeObj","makeSerializable","JSON","stringify","error","console","__serializationError","message","originalType","isObject","path","__type","value","Error","name","stack","cause","undefined","RegExp","source","flags","Array","isArray","has","__circular","refId","get","set","map","item","index","result","key","hasOwnProperty","safeValue","propertyName","Object","getOwnPropertySymbols","symbols","symbol","description","symbolName","toString","substring","String","deserialize","jsonString","parsed","parse","restoreCircularRefs","refs","i","startsWith","serializeForLogging","__logError","originalError","endpoint","headers","batchSize","batchTimeout","queue","batchTimer","isEnabled","encrypt","retryQueue","retryTimer","maxRetries","baseDelay","maxDelay","usePersistentBuffer","dbName","dbVersion","storeName","initPersistentBuffer","window","indexedDB","warn","request","open","onerror","onupgradeneeded","event","db","target","objectStoreNames","contains","createObjectStore","keyPath","autoIncrement","onsuccess","log","retryFailedItems","saveToPersistentBuffer","items","store","transaction","objectStore","serializedItems","fallbackData","retryCount","getFromPersistentBuffer","Promise","resolve","reject","removeFromPersistentBuffer","id","delete","failedItems","deserializedItems","addToRetryQueue","configure","config","sendError","errorPayload","context","payloadWithContext","dataToSend","addToQueue","type","data","flush","setTimeout","persistentId","delay","Math","min","pow","nextRetry","now","scheduleRetry","nextItem","find","processRetryQueue","max","itemsToRetry","sendToBackend","q","itemsToSend","clearTimeout","payload","serializedPayload","itemsCount","response","fetch","method","body","ok","status","statusText","json","forceFlush","getStats","queueLength","retryQueueLength","disable","contextCollector","defaultContexts","device","userAgent","navigator","language","screen","width","height","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","url","location","href","viewport","innerWidth","innerHeight","title","document","session","sessionId","generateSessionId","pageLoadTime","performance","ui","visibility","visibilityState","activeElement","tagName","network","online","onLine","connection","effectiveType","allFields","languages","availWidth","availHeight","colorDepth","pixelDepth","cookieEnabled","doNotTrack","pathname","search","hash","referrer","storage","localStorage","keys","size","keyNames","sessionStorage","downlink","rtt","focused","hasFocus","className","memory","used","round","usedJSHeapSize","total","totalJSHeapSize","limit","jsHeapSizeLimit","timing","navigationStart","loadEventEnd","startTime","collect","contextConfig","entries","forEach","contextType","collectDefaultContext","collectSpecificFields","defaultContext","field","getter","fields","_sessionId","random","substr","getAvailableTypes","getAvailableFields","getDefaultContextsInfo","info","interceptors","isInitialized","captureClicks","captureFetch","captureErrors","captureUnhandledRejections","contextTypes","originalHandlers","onunhandledrejection","eventListeners","init","setupClickInterceptor","setupFetchInterceptor","setupErrorInterceptors","clickHandler","el","selector","toLowerCase","split","Boolean","join","addEventListener","args","Request","apply","syntropyErrorHandler","lineno","colno","handleError","syntropyRejectionHandler","reason","onError","destroy","handler","eventType","removeEventListener","getHandlerInfo","hasOriginalFetch","hasOriginalOnError","hasOriginalOnUnhandledRejection","eventListenersCount","PRESETS","safe","customObjects","proxyTracking","useWorker","balanced","enabled","maxStates","trackNested","trackArrays","debug","trackFunctions","getPreset","preset","SyntropyFront","currentPreset","proxyObjectTracker","interceptorRegistry","workerManager","options","loadModules","loadPromises","then","ProxyObjectTracker$1","module","catch","useInterceptors","InterceptorRegistry$1","WorkerManager$1","default","all","addBreadcrumb","getBreadcrumbs","getBreadcrumbsByCategory","clearBreadcrumbs","getContext","customObjectCollector","collectCustomObjects","getAvailableContextTypes","getAvailableContextFields","setContext","setContextTypes","addCustomObject","removeCustomObject","getCustomObjectValue","getCustomObjectHistory","getCustomObjectNames","inject","interceptor","register","removeInterceptor","unregister","getRegisteredInterceptors","getInterceptorInfo","isActive","addProxyObject","objectPath","targetObject","addObject","getProxyObjectHistory","getObjectHistory","getProxyObjectState","getCurrentState","getProxyTrackedObjects","getTrackedObjects","removeProxyObject","removeObject","clearProxyObjects","getProxyTrackerStats","trackedObjects","addBreadcrumbToWorker","isWorkerAvailable","getBreadcrumbsFromWorker","clearBreadcrumbsFromWorker","sendErrorToWorker","pingWorker","ping","success","getWorkerStatus","getStatus","isAvailable","pendingRequests","getCurrentPreset","getPresetInfo","presetName","features","worker","agentMode","getAvailablePresets","changePreset","getConfiguration","syntropyFront","ProxyObjectTracker","onChangeCallback","onChange","proxy","proxyInfo","originalObject","states","deepClone","changeType","maxDepth","createProxy","depth","Proxy","prop","createArrayProxy","oldValue","isEqual","saveState","property","newValue","notifyChange","deleteProperty","isArrayMutator","arguments","oldArray","includes","changeData","state","statesCount","from","stats","totalStates","values","getTime","cloned","a","keysA","keysB","InterceptorRegistry","customInterceptors","createInterceptorApi","getTimestamp","apiVersion","availableMethods","registered","interceptorApi","setEnabled","hasInit","hasDestroy","getApiDocumentation","version","methods","signature","example","requestId","setupWorker","Worker","handleWorkerMessage","handleWorkerError","handleWorkerUnavailable","sendMessage","generateRequestId","postMessage","updateContext","getWorkerStats","terminate"],"mappings":"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"}